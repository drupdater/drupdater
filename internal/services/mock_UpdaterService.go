// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"

	"github.com/drupdater/drupdater/internal"
	"github.com/drupdater/drupdater/pkg/drush"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUpdaterService creates a new instance of MockUpdaterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdaterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdaterService {
	mock := &MockUpdaterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdaterService is an autogenerated mock type for the UpdaterService type
type MockUpdaterService struct {
	mock.Mock
}

type MockUpdaterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdaterService) EXPECT() *MockUpdaterService_Expecter {
	return &MockUpdaterService_Expecter{mock: &_m.Mock}
}

// IsAborted provides a mock function for the type MockUpdaterService
func (_mock *MockUpdaterService) IsAborted() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAborted")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockUpdaterService_IsAborted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAborted'
type MockUpdaterService_IsAborted_Call struct {
	*mock.Call
}

// IsAborted is a helper method to define mock.On call
func (_e *MockUpdaterService_Expecter) IsAborted() *MockUpdaterService_IsAborted_Call {
	return &MockUpdaterService_IsAborted_Call{Call: _e.mock.On("IsAborted")}
}

func (_c *MockUpdaterService_IsAborted_Call) Run(run func()) *MockUpdaterService_IsAborted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUpdaterService_IsAborted_Call) Return(b bool) *MockUpdaterService_IsAborted_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockUpdaterService_IsAborted_Call) RunAndReturn(run func() bool) *MockUpdaterService_IsAborted_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDependencies provides a mock function for the type MockUpdaterService
func (_mock *MockUpdaterService) UpdateDependencies(ctx context.Context, path string, packagesToUpdate []string, worktree internal.Worktree, minimalChanges bool) error {
	ret := _mock.Called(ctx, path, packagesToUpdate, worktree, minimalChanges)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDependencies")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, internal.Worktree, bool) error); ok {
		r0 = returnFunc(ctx, path, packagesToUpdate, worktree, minimalChanges)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUpdaterService_UpdateDependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDependencies'
type MockUpdaterService_UpdateDependencies_Call struct {
	*mock.Call
}

// UpdateDependencies is a helper method to define mock.On call
//   - ctx
//   - path
//   - packagesToUpdate
//   - worktree
//   - minimalChanges
func (_e *MockUpdaterService_Expecter) UpdateDependencies(ctx interface{}, path interface{}, packagesToUpdate interface{}, worktree interface{}, minimalChanges interface{}) *MockUpdaterService_UpdateDependencies_Call {
	return &MockUpdaterService_UpdateDependencies_Call{Call: _e.mock.On("UpdateDependencies", ctx, path, packagesToUpdate, worktree, minimalChanges)}
}

func (_c *MockUpdaterService_UpdateDependencies_Call) Run(run func(ctx context.Context, path string, packagesToUpdate []string, worktree internal.Worktree, minimalChanges bool)) *MockUpdaterService_UpdateDependencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(internal.Worktree), args[4].(bool))
	})
	return _c
}

func (_c *MockUpdaterService_UpdateDependencies_Call) Return(err error) *MockUpdaterService_UpdateDependencies_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUpdaterService_UpdateDependencies_Call) RunAndReturn(run func(ctx context.Context, path string, packagesToUpdate []string, worktree internal.Worktree, minimalChanges bool) error) *MockUpdaterService_UpdateDependencies_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDrupal provides a mock function for the type MockUpdaterService
func (_mock *MockUpdaterService) UpdateDrupal(ctx context.Context, path string, worktree internal.Worktree, site string) (map[string]drush.UpdateHook, error) {
	ret := _mock.Called(ctx, path, worktree, site)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDrupal")
	}

	var r0 map[string]drush.UpdateHook
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, internal.Worktree, string) (map[string]drush.UpdateHook, error)); ok {
		return returnFunc(ctx, path, worktree, site)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, internal.Worktree, string) map[string]drush.UpdateHook); ok {
		r0 = returnFunc(ctx, path, worktree, site)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]drush.UpdateHook)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, internal.Worktree, string) error); ok {
		r1 = returnFunc(ctx, path, worktree, site)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpdaterService_UpdateDrupal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDrupal'
type MockUpdaterService_UpdateDrupal_Call struct {
	*mock.Call
}

// UpdateDrupal is a helper method to define mock.On call
//   - ctx
//   - path
//   - worktree
//   - site
func (_e *MockUpdaterService_Expecter) UpdateDrupal(ctx interface{}, path interface{}, worktree interface{}, site interface{}) *MockUpdaterService_UpdateDrupal_Call {
	return &MockUpdaterService_UpdateDrupal_Call{Call: _e.mock.On("UpdateDrupal", ctx, path, worktree, site)}
}

func (_c *MockUpdaterService_UpdateDrupal_Call) Run(run func(ctx context.Context, path string, worktree internal.Worktree, site string)) *MockUpdaterService_UpdateDrupal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(internal.Worktree), args[3].(string))
	})
	return _c
}

func (_c *MockUpdaterService_UpdateDrupal_Call) Return(stringToUpdateHook map[string]drush.UpdateHook, err error) *MockUpdaterService_UpdateDrupal_Call {
	_c.Call.Return(stringToUpdateHook, err)
	return _c
}

func (_c *MockUpdaterService_UpdateDrupal_Call) RunAndReturn(run func(ctx context.Context, path string, worktree internal.Worktree, site string) (map[string]drush.UpdateHook, error)) *MockUpdaterService_UpdateDrupal_Call {
	_c.Call.Return(run)
	return _c
}
