// Code generated by mockery v2.53.3. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockWorkflowService is an autogenerated mock type for the WorkflowService type
type MockWorkflowService struct {
	mock.Mock
}

type MockWorkflowService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflowService) EXPECT() *MockWorkflowService_Expecter {
	return &MockWorkflowService_Expecter{mock: &_m.Mock}
}

// StartUpdate provides a mock function with given fields: ctx, strategy
func (_m *MockWorkflowService) StartUpdate(ctx context.Context, strategy WorkflowStrategy) error {
	ret := _m.Called(ctx, strategy)

	if len(ret) == 0 {
		panic("no return value specified for StartUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, WorkflowStrategy) error); ok {
		r0 = rf(ctx, strategy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkflowService_StartUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartUpdate'
type MockWorkflowService_StartUpdate_Call struct {
	*mock.Call
}

// StartUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - strategy WorkflowStrategy
func (_e *MockWorkflowService_Expecter) StartUpdate(ctx interface{}, strategy interface{}) *MockWorkflowService_StartUpdate_Call {
	return &MockWorkflowService_StartUpdate_Call{Call: _e.mock.On("StartUpdate", ctx, strategy)}
}

func (_c *MockWorkflowService_StartUpdate_Call) Run(run func(ctx context.Context, strategy WorkflowStrategy)) *MockWorkflowService_StartUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(WorkflowStrategy))
	})
	return _c
}

func (_c *MockWorkflowService_StartUpdate_Call) Return(_a0 error) *MockWorkflowService_StartUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkflowService_StartUpdate_Call) RunAndReturn(run func(context.Context, WorkflowStrategy) error) *MockWorkflowService_StartUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkflowService creates a new instance of MockWorkflowService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflowService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflowService {
	mock := &MockWorkflowService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
