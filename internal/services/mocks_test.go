// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"

	"github.com/drupdater/drupdater/pkg/composer"
	"github.com/drupdater/drupdater/pkg/repo"
	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing"
	"github.com/go-git/go-git/v5/plumbing/object"
	"github.com/go-git/go-git/v5/plumbing/storer"
	mock "github.com/stretchr/testify/mock"
)

// NewMockComposer creates a new instance of MockComposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComposer {
	mock := &MockComposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComposer is an autogenerated mock type for the Composer type
type MockComposer struct {
	mock.Mock
}

type MockComposer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComposer) EXPECT() *MockComposer_Expecter {
	return &MockComposer_Expecter{mock: &_m.Mock}
}

// GetLockHash provides a mock function for the type MockComposer
func (_mock *MockComposer) GetLockHash(dir string) (string, error) {
	ret := _mock.Called(dir)

	if len(ret) == 0 {
		panic("no return value specified for GetLockHash")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(dir)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(dir)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(dir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_GetLockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLockHash'
type MockComposer_GetLockHash_Call struct {
	*mock.Call
}

// GetLockHash is a helper method to define mock.On call
//   - dir
func (_e *MockComposer_Expecter) GetLockHash(dir interface{}) *MockComposer_GetLockHash_Call {
	return &MockComposer_GetLockHash_Call{Call: _e.mock.On("GetLockHash", dir)}
}

func (_c *MockComposer_GetLockHash_Call) Run(run func(dir string)) *MockComposer_GetLockHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockComposer_GetLockHash_Call) Return(s string, err error) *MockComposer_GetLockHash_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_GetLockHash_Call) RunAndReturn(run func(dir string) (string, error)) *MockComposer_GetLockHash_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function for the type MockComposer
func (_mock *MockComposer) Install(ctx context.Context, dir string) error {
	ret := _mock.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, dir)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComposer_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockComposer_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - ctx
//   - dir
func (_e *MockComposer_Expecter) Install(ctx interface{}, dir interface{}) *MockComposer_Install_Call {
	return &MockComposer_Install_Call{Call: _e.mock.On("Install", ctx, dir)}
}

func (_c *MockComposer_Install_Call) Run(run func(ctx context.Context, dir string)) *MockComposer_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComposer_Install_Call) Return(err error) *MockComposer_Install_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComposer_Install_Call) RunAndReturn(run func(ctx context.Context, dir string) error) *MockComposer_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockComposer
func (_mock *MockComposer) Update(ctx context.Context, dir string, packagesToUpdate []string, packagesToKeep []string, minimalChanges bool, dryRun bool) ([]composer.PackageChange, error) {
	ret := _mock.Called(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 []composer.PackageChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string, bool, bool) ([]composer.PackageChange, error)); ok {
		return returnFunc(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string, bool, bool) []composer.PackageChange); ok {
		r0 = returnFunc(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]composer.PackageChange)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string, []string, bool, bool) error); ok {
		r1 = returnFunc(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockComposer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - dir
//   - packagesToUpdate
//   - packagesToKeep
//   - minimalChanges
//   - dryRun
func (_e *MockComposer_Expecter) Update(ctx interface{}, dir interface{}, packagesToUpdate interface{}, packagesToKeep interface{}, minimalChanges interface{}, dryRun interface{}) *MockComposer_Update_Call {
	return &MockComposer_Update_Call{Call: _e.mock.On("Update", ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)}
}

func (_c *MockComposer_Update_Call) Run(run func(ctx context.Context, dir string, packagesToUpdate []string, packagesToKeep []string, minimalChanges bool, dryRun bool)) *MockComposer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].([]string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *MockComposer_Update_Call) Return(packageChanges []composer.PackageChange, err error) *MockComposer_Update_Call {
	_c.Call.Return(packageChanges, err)
	return _c
}

func (_c *MockComposer_Update_Call) RunAndReturn(run func(ctx context.Context, dir string, packagesToUpdate []string, packagesToKeep []string, minimalChanges bool, dryRun bool) ([]composer.PackageChange, error)) *MockComposer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDrush creates a new instance of MockDrush. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDrush(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDrush {
	mock := &MockDrush{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDrush is an autogenerated mock type for the Drush type
type MockDrush struct {
	mock.Mock
}

type MockDrush_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDrush) EXPECT() *MockDrush_Expecter {
	return &MockDrush_Expecter{mock: &_m.Mock}
}

// ConfigResave provides a mock function for the type MockDrush
func (_mock *MockDrush) ConfigResave(ctx context.Context, dir string, site string) error {
	ret := _mock.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for ConfigResave")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDrush_ConfigResave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigResave'
type MockDrush_ConfigResave_Call struct {
	*mock.Call
}

// ConfigResave is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
func (_e *MockDrush_Expecter) ConfigResave(ctx interface{}, dir interface{}, site interface{}) *MockDrush_ConfigResave_Call {
	return &MockDrush_ConfigResave_Call{Call: _e.mock.On("ConfigResave", ctx, dir, site)}
}

func (_c *MockDrush_ConfigResave_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrush_ConfigResave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrush_ConfigResave_Call) Return(err error) *MockDrush_ConfigResave_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDrush_ConfigResave_Call) RunAndReturn(run func(ctx context.Context, dir string, site string) error) *MockDrush_ConfigResave_Call {
	_c.Call.Return(run)
	return _c
}

// ExportConfiguration provides a mock function for the type MockDrush
func (_mock *MockDrush) ExportConfiguration(ctx context.Context, dir string, site string) error {
	ret := _mock.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for ExportConfiguration")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDrush_ExportConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportConfiguration'
type MockDrush_ExportConfiguration_Call struct {
	*mock.Call
}

// ExportConfiguration is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
func (_e *MockDrush_Expecter) ExportConfiguration(ctx interface{}, dir interface{}, site interface{}) *MockDrush_ExportConfiguration_Call {
	return &MockDrush_ExportConfiguration_Call{Call: _e.mock.On("ExportConfiguration", ctx, dir, site)}
}

func (_c *MockDrush_ExportConfiguration_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrush_ExportConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrush_ExportConfiguration_Call) Return(err error) *MockDrush_ExportConfiguration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDrush_ExportConfiguration_Call) RunAndReturn(run func(ctx context.Context, dir string, site string) error) *MockDrush_ExportConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSite provides a mock function for the type MockDrush
func (_mock *MockDrush) UpdateSite(ctx context.Context, dir string, site string) error {
	ret := _mock.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSite")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDrush_UpdateSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSite'
type MockDrush_UpdateSite_Call struct {
	*mock.Call
}

// UpdateSite is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
func (_e *MockDrush_Expecter) UpdateSite(ctx interface{}, dir interface{}, site interface{}) *MockDrush_UpdateSite_Call {
	return &MockDrush_UpdateSite_Call{Call: _e.mock.On("UpdateSite", ctx, dir, site)}
}

func (_c *MockDrush_UpdateSite_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrush_UpdateSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrush_UpdateSite_Call) Return(err error) *MockDrush_UpdateSite_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDrush_UpdateSite_Call) RunAndReturn(run func(ctx context.Context, dir string, site string) error) *MockDrush_UpdateSite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// BranchExists provides a mock function for the type MockRepository
func (_mock *MockRepository) BranchExists(repository repo.Repository, branch string) (bool, error) {
	ret := _mock.Called(repository, branch)

	if len(ret) == 0 {
		panic("no return value specified for BranchExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(repo.Repository, string) (bool, error)); ok {
		return returnFunc(repository, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(repo.Repository, string) bool); ok {
		r0 = returnFunc(repository, branch)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(repo.Repository, string) error); ok {
		r1 = returnFunc(repository, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_BranchExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BranchExists'
type MockRepository_BranchExists_Call struct {
	*mock.Call
}

// BranchExists is a helper method to define mock.On call
//   - repository
//   - branch
func (_e *MockRepository_Expecter) BranchExists(repository interface{}, branch interface{}) *MockRepository_BranchExists_Call {
	return &MockRepository_BranchExists_Call{Call: _e.mock.On("BranchExists", repository, branch)}
}

func (_c *MockRepository_BranchExists_Call) Run(run func(repository repo.Repository, branch string)) *MockRepository_BranchExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repo.Repository), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_BranchExists_Call) Return(b bool, err error) *MockRepository_BranchExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_BranchExists_Call) RunAndReturn(run func(repository repo.Repository, branch string) (bool, error)) *MockRepository_BranchExists_Call {
	_c.Call.Return(run)
	return _c
}

// CloneRepository provides a mock function for the type MockRepository
func (_mock *MockRepository) CloneRepository(repository string, branch string, token string, username string, email string) (*git.Repository, *git.Worktree, string, error) {
	ret := _mock.Called(repository, branch, token, username, email)

	if len(ret) == 0 {
		panic("no return value specified for CloneRepository")
	}

	var r0 *git.Repository
	var r1 *git.Worktree
	var r2 string
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string) (*git.Repository, *git.Worktree, string, error)); ok {
		return returnFunc(repository, branch, token, username, email)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string) *git.Repository); ok {
		r0 = returnFunc(repository, branch, token, username, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, string) *git.Worktree); ok {
		r1 = returnFunc(repository, branch, token, username, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*git.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, string, string, string) string); ok {
		r2 = returnFunc(repository, branch, token, username, email)
	} else {
		r2 = ret.Get(2).(string)
	}
	if returnFunc, ok := ret.Get(3).(func(string, string, string, string, string) error); ok {
		r3 = returnFunc(repository, branch, token, username, email)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockRepository_CloneRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneRepository'
type MockRepository_CloneRepository_Call struct {
	*mock.Call
}

// CloneRepository is a helper method to define mock.On call
//   - repository
//   - branch
//   - token
//   - username
//   - email
func (_e *MockRepository_Expecter) CloneRepository(repository interface{}, branch interface{}, token interface{}, username interface{}, email interface{}) *MockRepository_CloneRepository_Call {
	return &MockRepository_CloneRepository_Call{Call: _e.mock.On("CloneRepository", repository, branch, token, username, email)}
}

func (_c *MockRepository_CloneRepository_Call) Run(run func(repository string, branch string, token string, username string, email string)) *MockRepository_CloneRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockRepository_CloneRepository_Call) Return(repository1 *git.Repository, worktree *git.Worktree, s string, err error) *MockRepository_CloneRepository_Call {
	_c.Call.Return(repository1, worktree, s, err)
	return _c
}

func (_c *MockRepository_CloneRepository_Call) RunAndReturn(run func(repository string, branch string, token string, username string, email string) (*git.Repository, *git.Worktree, string, error)) *MockRepository_CloneRepository_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitRepository creates a new instance of MockGitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitRepository {
	mock := &MockGitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGitRepository is an autogenerated mock type for the GitRepository type
type MockGitRepository struct {
	mock.Mock
}

type MockGitRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitRepository) EXPECT() *MockGitRepository_Expecter {
	return &MockGitRepository_Expecter{mock: &_m.Mock}
}

// CommitObject provides a mock function for the type MockGitRepository
func (_mock *MockGitRepository) CommitObject(h plumbing.Hash) (*object.Commit, error) {
	ret := _mock.Called(h)

	if len(ret) == 0 {
		panic("no return value specified for CommitObject")
	}

	var r0 *object.Commit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(plumbing.Hash) (*object.Commit, error)); ok {
		return returnFunc(h)
	}
	if returnFunc, ok := ret.Get(0).(func(plumbing.Hash) *object.Commit); ok {
		r0 = returnFunc(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Commit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(plumbing.Hash) error); ok {
		r1 = returnFunc(h)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitRepository_CommitObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitObject'
type MockGitRepository_CommitObject_Call struct {
	*mock.Call
}

// CommitObject is a helper method to define mock.On call
//   - h
func (_e *MockGitRepository_Expecter) CommitObject(h interface{}) *MockGitRepository_CommitObject_Call {
	return &MockGitRepository_CommitObject_Call{Call: _e.mock.On("CommitObject", h)}
}

func (_c *MockGitRepository_CommitObject_Call) Run(run func(h plumbing.Hash)) *MockGitRepository_CommitObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(plumbing.Hash))
	})
	return _c
}

func (_c *MockGitRepository_CommitObject_Call) Return(commit *object.Commit, err error) *MockGitRepository_CommitObject_Call {
	_c.Call.Return(commit, err)
	return _c
}

func (_c *MockGitRepository_CommitObject_Call) RunAndReturn(run func(h plumbing.Hash) (*object.Commit, error)) *MockGitRepository_CommitObject_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function for the type MockGitRepository
func (_mock *MockGitRepository) Head() (*plumbing.Reference, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 *plumbing.Reference
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*plumbing.Reference, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *plumbing.Reference); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitRepository_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type MockGitRepository_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
func (_e *MockGitRepository_Expecter) Head() *MockGitRepository_Head_Call {
	return &MockGitRepository_Head_Call{Call: _e.mock.On("Head")}
}

func (_c *MockGitRepository_Head_Call) Run(run func()) *MockGitRepository_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitRepository_Head_Call) Return(reference *plumbing.Reference, err error) *MockGitRepository_Head_Call {
	_c.Call.Return(reference, err)
	return _c
}

func (_c *MockGitRepository_Head_Call) RunAndReturn(run func() (*plumbing.Reference, error)) *MockGitRepository_Head_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function for the type MockGitRepository
func (_mock *MockGitRepository) Push(o *git.PushOptions) error {
	ret := _mock.Called(o)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*git.PushOptions) error); ok {
		r0 = returnFunc(o)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGitRepository_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockGitRepository_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - o
func (_e *MockGitRepository_Expecter) Push(o interface{}) *MockGitRepository_Push_Call {
	return &MockGitRepository_Push_Call{Call: _e.mock.On("Push", o)}
}

func (_c *MockGitRepository_Push_Call) Run(run func(o *git.PushOptions)) *MockGitRepository_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*git.PushOptions))
	})
	return _c
}

func (_c *MockGitRepository_Push_Call) Return(err error) *MockGitRepository_Push_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGitRepository_Push_Call) RunAndReturn(run func(o *git.PushOptions) error) *MockGitRepository_Push_Call {
	_c.Call.Return(run)
	return _c
}

// References provides a mock function for the type MockGitRepository
func (_mock *MockGitRepository) References() (storer.ReferenceIter, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for References")
	}

	var r0 storer.ReferenceIter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (storer.ReferenceIter, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() storer.ReferenceIter); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storer.ReferenceIter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitRepository_References_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'References'
type MockGitRepository_References_Call struct {
	*mock.Call
}

// References is a helper method to define mock.On call
func (_e *MockGitRepository_Expecter) References() *MockGitRepository_References_Call {
	return &MockGitRepository_References_Call{Call: _e.mock.On("References")}
}

func (_c *MockGitRepository_References_Call) Run(run func()) *MockGitRepository_References_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitRepository_References_Call) Return(referenceIter storer.ReferenceIter, err error) *MockGitRepository_References_Call {
	_c.Call.Return(referenceIter, err)
	return _c
}

func (_c *MockGitRepository_References_Call) RunAndReturn(run func() (storer.ReferenceIter, error)) *MockGitRepository_References_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorktree creates a new instance of MockWorktree. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorktree(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorktree {
	mock := &MockWorktree{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorktree is an autogenerated mock type for the Worktree type
type MockWorktree struct {
	mock.Mock
}

type MockWorktree_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorktree) EXPECT() *MockWorktree_Expecter {
	return &MockWorktree_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Add(path string) (plumbing.Hash, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 plumbing.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (plumbing.Hash, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) plumbing.Hash); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockWorktree_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - path
func (_e *MockWorktree_Expecter) Add(path interface{}) *MockWorktree_Add_Call {
	return &MockWorktree_Add_Call{Call: _e.mock.On("Add", path)}
}

func (_c *MockWorktree_Add_Call) Run(run func(path string)) *MockWorktree_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWorktree_Add_Call) Return(hash plumbing.Hash, err error) *MockWorktree_Add_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *MockWorktree_Add_Call) RunAndReturn(run func(path string) (plumbing.Hash, error)) *MockWorktree_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddGlob provides a mock function for the type MockWorktree
func (_mock *MockWorktree) AddGlob(pattern string) error {
	ret := _mock.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for AddGlob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(pattern)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorktree_AddGlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGlob'
type MockWorktree_AddGlob_Call struct {
	*mock.Call
}

// AddGlob is a helper method to define mock.On call
//   - pattern
func (_e *MockWorktree_Expecter) AddGlob(pattern interface{}) *MockWorktree_AddGlob_Call {
	return &MockWorktree_AddGlob_Call{Call: _e.mock.On("AddGlob", pattern)}
}

func (_c *MockWorktree_AddGlob_Call) Run(run func(pattern string)) *MockWorktree_AddGlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWorktree_AddGlob_Call) Return(err error) *MockWorktree_AddGlob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorktree_AddGlob_Call) RunAndReturn(run func(pattern string) error) *MockWorktree_AddGlob_Call {
	_c.Call.Return(run)
	return _c
}

// Checkout provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Checkout(opts *git.CheckoutOptions) error {
	ret := _mock.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*git.CheckoutOptions) error); ok {
		r0 = returnFunc(opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorktree_Checkout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Checkout'
type MockWorktree_Checkout_Call struct {
	*mock.Call
}

// Checkout is a helper method to define mock.On call
//   - opts
func (_e *MockWorktree_Expecter) Checkout(opts interface{}) *MockWorktree_Checkout_Call {
	return &MockWorktree_Checkout_Call{Call: _e.mock.On("Checkout", opts)}
}

func (_c *MockWorktree_Checkout_Call) Run(run func(opts *git.CheckoutOptions)) *MockWorktree_Checkout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*git.CheckoutOptions))
	})
	return _c
}

func (_c *MockWorktree_Checkout_Call) Return(err error) *MockWorktree_Checkout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorktree_Checkout_Call) RunAndReturn(run func(opts *git.CheckoutOptions) error) *MockWorktree_Checkout_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Commit(msg string, opts *git.CommitOptions) (plumbing.Hash, error) {
	ret := _mock.Called(msg, opts)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 plumbing.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *git.CommitOptions) (plumbing.Hash, error)); ok {
		return returnFunc(msg, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *git.CommitOptions) plumbing.Hash); ok {
		r0 = returnFunc(msg, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *git.CommitOptions) error); ok {
		r1 = returnFunc(msg, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockWorktree_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - msg
//   - opts
func (_e *MockWorktree_Expecter) Commit(msg interface{}, opts interface{}) *MockWorktree_Commit_Call {
	return &MockWorktree_Commit_Call{Call: _e.mock.On("Commit", msg, opts)}
}

func (_c *MockWorktree_Commit_Call) Run(run func(msg string, opts *git.CommitOptions)) *MockWorktree_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*git.CommitOptions))
	})
	return _c
}

func (_c *MockWorktree_Commit_Call) Return(hash plumbing.Hash, err error) *MockWorktree_Commit_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *MockWorktree_Commit_Call) RunAndReturn(run func(msg string, opts *git.CommitOptions) (plumbing.Hash, error)) *MockWorktree_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Remove(path string) (plumbing.Hash, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 plumbing.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (plumbing.Hash, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) plumbing.Hash); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockWorktree_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path
func (_e *MockWorktree_Expecter) Remove(path interface{}) *MockWorktree_Remove_Call {
	return &MockWorktree_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *MockWorktree_Remove_Call) Run(run func(path string)) *MockWorktree_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWorktree_Remove_Call) Return(hash plumbing.Hash, err error) *MockWorktree_Remove_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *MockWorktree_Remove_Call) RunAndReturn(run func(path string) (plumbing.Hash, error)) *MockWorktree_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Status() (git.Status, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 git.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (git.Status, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() git.Status); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(git.Status)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockWorktree_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockWorktree_Expecter) Status() *MockWorktree_Status_Call {
	return &MockWorktree_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockWorktree_Status_Call) Run(run func()) *MockWorktree_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorktree_Status_Call) Return(status git.Status, err error) *MockWorktree_Status_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockWorktree_Status_Call) RunAndReturn(run func() (git.Status, error)) *MockWorktree_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInstaller creates a new instance of MockInstaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInstaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInstaller {
	mock := &MockInstaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInstaller is an autogenerated mock type for the Installer type
type MockInstaller struct {
	mock.Mock
}

type MockInstaller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInstaller) EXPECT() *MockInstaller_Expecter {
	return &MockInstaller_Expecter{mock: &_m.Mock}
}

// ConfigureDatabase provides a mock function for the type MockInstaller
func (_mock *MockInstaller) ConfigureDatabase(ctx context.Context, dir string, site string) error {
	ret := _mock.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureDatabase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_ConfigureDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureDatabase'
type MockInstaller_ConfigureDatabase_Call struct {
	*mock.Call
}

// ConfigureDatabase is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
func (_e *MockInstaller_Expecter) ConfigureDatabase(ctx interface{}, dir interface{}, site interface{}) *MockInstaller_ConfigureDatabase_Call {
	return &MockInstaller_ConfigureDatabase_Call{Call: _e.mock.On("ConfigureDatabase", ctx, dir, site)}
}

func (_c *MockInstaller_ConfigureDatabase_Call) Run(run func(ctx context.Context, dir string, site string)) *MockInstaller_ConfigureDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockInstaller_ConfigureDatabase_Call) Return(err error) *MockInstaller_ConfigureDatabase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_ConfigureDatabase_Call) RunAndReturn(run func(ctx context.Context, dir string, site string) error) *MockInstaller_ConfigureDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function for the type MockInstaller
func (_mock *MockInstaller) Install(ctx context.Context, dir string, site string) error {
	ret := _mock.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockInstaller_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockInstaller_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
func (_e *MockInstaller_Expecter) Install(ctx interface{}, dir interface{}, site interface{}) *MockInstaller_Install_Call {
	return &MockInstaller_Install_Call{Call: _e.mock.On("Install", ctx, dir, site)}
}

func (_c *MockInstaller_Install_Call) Run(run func(ctx context.Context, dir string, site string)) *MockInstaller_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockInstaller_Install_Call) Return(err error) *MockInstaller_Install_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInstaller_Install_Call) RunAndReturn(run func(ctx context.Context, dir string, site string) error) *MockInstaller_Install_Call {
	_c.Call.Return(run)
	return _c
}
