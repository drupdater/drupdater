// Code generated by mockery v2.53.3. DO NOT EDIT.

package services

import (
	context "context"

	internal "github.com/drupdater/drupdater/internal"
	mock "github.com/stretchr/testify/mock"
)

// MockWorkflowStrategy is an autogenerated mock type for the WorkflowStrategy type
type MockWorkflowStrategy struct {
	mock.Mock
}

type MockWorkflowStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflowStrategy) EXPECT() *MockWorkflowStrategy_Expecter {
	return &MockWorkflowStrategy_Expecter{mock: &_m.Mock}
}

// GenerateBranchName provides a mock function with given fields: path
func (_m *MockWorkflowStrategy) GenerateBranchName(path string) string {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBranchName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockWorkflowStrategy_GenerateBranchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateBranchName'
type MockWorkflowStrategy_GenerateBranchName_Call struct {
	*mock.Call
}

// GenerateBranchName is a helper method to define mock.On call
//   - path string
func (_e *MockWorkflowStrategy_Expecter) GenerateBranchName(path interface{}) *MockWorkflowStrategy_GenerateBranchName_Call {
	return &MockWorkflowStrategy_GenerateBranchName_Call{Call: _e.mock.On("GenerateBranchName", path)}
}

func (_c *MockWorkflowStrategy_GenerateBranchName_Call) Run(run func(path string)) *MockWorkflowStrategy_GenerateBranchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWorkflowStrategy_GenerateBranchName_Call) Return(_a0 string) *MockWorkflowStrategy_GenerateBranchName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkflowStrategy_GenerateBranchName_Call) RunAndReturn(run func(string) string) *MockWorkflowStrategy_GenerateBranchName_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePRDetails provides a mock function with no fields
func (_m *MockWorkflowStrategy) GeneratePRDetails() (string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GeneratePRDetails")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MockWorkflowStrategy_GeneratePRDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePRDetails'
type MockWorkflowStrategy_GeneratePRDetails_Call struct {
	*mock.Call
}

// GeneratePRDetails is a helper method to define mock.On call
func (_e *MockWorkflowStrategy_Expecter) GeneratePRDetails() *MockWorkflowStrategy_GeneratePRDetails_Call {
	return &MockWorkflowStrategy_GeneratePRDetails_Call{Call: _e.mock.On("GeneratePRDetails")}
}

func (_c *MockWorkflowStrategy_GeneratePRDetails_Call) Run(run func()) *MockWorkflowStrategy_GeneratePRDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkflowStrategy_GeneratePRDetails_Call) Return(_a0 string, _a1 string) *MockWorkflowStrategy_GeneratePRDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkflowStrategy_GeneratePRDetails_Call) RunAndReturn(run func() (string, string)) *MockWorkflowStrategy_GeneratePRDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplateData provides a mock function with given fields: result, updateHooks
func (_m *MockWorkflowStrategy) GetTemplateData(result WorkflowUpdateResult, updateHooks UpdateHooksPerSite) (TemplateData, error) {
	ret := _m.Called(result, updateHooks)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateData")
	}

	var r0 TemplateData
	var r1 error
	if rf, ok := ret.Get(0).(func(WorkflowUpdateResult, UpdateHooksPerSite) (TemplateData, error)); ok {
		return rf(result, updateHooks)
	}
	if rf, ok := ret.Get(0).(func(WorkflowUpdateResult, UpdateHooksPerSite) TemplateData); ok {
		r0 = rf(result, updateHooks)
	} else {
		r0 = ret.Get(0).(TemplateData)
	}

	if rf, ok := ret.Get(1).(func(WorkflowUpdateResult, UpdateHooksPerSite) error); ok {
		r1 = rf(result, updateHooks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkflowStrategy_GetTemplateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateData'
type MockWorkflowStrategy_GetTemplateData_Call struct {
	*mock.Call
}

// GetTemplateData is a helper method to define mock.On call
//   - result WorkflowUpdateResult
//   - updateHooks UpdateHooksPerSite
func (_e *MockWorkflowStrategy_Expecter) GetTemplateData(result interface{}, updateHooks interface{}) *MockWorkflowStrategy_GetTemplateData_Call {
	return &MockWorkflowStrategy_GetTemplateData_Call{Call: _e.mock.On("GetTemplateData", result, updateHooks)}
}

func (_c *MockWorkflowStrategy_GetTemplateData_Call) Run(run func(result WorkflowUpdateResult, updateHooks UpdateHooksPerSite)) *MockWorkflowStrategy_GetTemplateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(WorkflowUpdateResult), args[1].(UpdateHooksPerSite))
	})
	return _c
}

func (_c *MockWorkflowStrategy_GetTemplateData_Call) Return(_a0 TemplateData, _a1 error) *MockWorkflowStrategy_GetTemplateData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkflowStrategy_GetTemplateData_Call) RunAndReturn(run func(WorkflowUpdateResult, UpdateHooksPerSite) (TemplateData, error)) *MockWorkflowStrategy_GetTemplateData_Call {
	_c.Call.Return(run)
	return _c
}

// PostUpdate provides a mock function with given fields: ctx, path, worktree
func (_m *MockWorkflowStrategy) PostUpdate(ctx context.Context, path string, worktree internal.Worktree) error {
	ret := _m.Called(ctx, path, worktree)

	if len(ret) == 0 {
		panic("no return value specified for PostUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, internal.Worktree) error); ok {
		r0 = rf(ctx, path, worktree)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkflowStrategy_PostUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUpdate'
type MockWorkflowStrategy_PostUpdate_Call struct {
	*mock.Call
}

// PostUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - worktree internal.Worktree
func (_e *MockWorkflowStrategy_Expecter) PostUpdate(ctx interface{}, path interface{}, worktree interface{}) *MockWorkflowStrategy_PostUpdate_Call {
	return &MockWorkflowStrategy_PostUpdate_Call{Call: _e.mock.On("PostUpdate", ctx, path, worktree)}
}

func (_c *MockWorkflowStrategy_PostUpdate_Call) Run(run func(ctx context.Context, path string, worktree internal.Worktree)) *MockWorkflowStrategy_PostUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(internal.Worktree))
	})
	return _c
}

func (_c *MockWorkflowStrategy_PostUpdate_Call) Return(_a0 error) *MockWorkflowStrategy_PostUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkflowStrategy_PostUpdate_Call) RunAndReturn(run func(context.Context, string, internal.Worktree) error) *MockWorkflowStrategy_PostUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// PreUpdate provides a mock function with given fields: ctx, path
func (_m *MockWorkflowStrategy) PreUpdate(ctx context.Context, path string) ([]string, bool, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for PreUpdate")
	}

	var r0 []string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, bool, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWorkflowStrategy_PreUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreUpdate'
type MockWorkflowStrategy_PreUpdate_Call struct {
	*mock.Call
}

// PreUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockWorkflowStrategy_Expecter) PreUpdate(ctx interface{}, path interface{}) *MockWorkflowStrategy_PreUpdate_Call {
	return &MockWorkflowStrategy_PreUpdate_Call{Call: _e.mock.On("PreUpdate", ctx, path)}
}

func (_c *MockWorkflowStrategy_PreUpdate_Call) Run(run func(ctx context.Context, path string)) *MockWorkflowStrategy_PreUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWorkflowStrategy_PreUpdate_Call) Return(_a0 []string, _a1 bool, _a2 error) *MockWorkflowStrategy_PreUpdate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockWorkflowStrategy_PreUpdate_Call) RunAndReturn(run func(context.Context, string) ([]string, bool, error)) *MockWorkflowStrategy_PreUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldContinue provides a mock function with given fields: packagesToUpdate
func (_m *MockWorkflowStrategy) ShouldContinue(packagesToUpdate []string) bool {
	ret := _m.Called(packagesToUpdate)

	if len(ret) == 0 {
		panic("no return value specified for ShouldContinue")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string) bool); ok {
		r0 = rf(packagesToUpdate)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockWorkflowStrategy_ShouldContinue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldContinue'
type MockWorkflowStrategy_ShouldContinue_Call struct {
	*mock.Call
}

// ShouldContinue is a helper method to define mock.On call
//   - packagesToUpdate []string
func (_e *MockWorkflowStrategy_Expecter) ShouldContinue(packagesToUpdate interface{}) *MockWorkflowStrategy_ShouldContinue_Call {
	return &MockWorkflowStrategy_ShouldContinue_Call{Call: _e.mock.On("ShouldContinue", packagesToUpdate)}
}

func (_c *MockWorkflowStrategy_ShouldContinue_Call) Run(run func(packagesToUpdate []string)) *MockWorkflowStrategy_ShouldContinue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockWorkflowStrategy_ShouldContinue_Call) Return(_a0 bool) *MockWorkflowStrategy_ShouldContinue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkflowStrategy_ShouldContinue_Call) RunAndReturn(run func([]string) bool) *MockWorkflowStrategy_ShouldContinue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkflowStrategy creates a new instance of MockWorkflowStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflowStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflowStrategy {
	mock := &MockWorkflowStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
