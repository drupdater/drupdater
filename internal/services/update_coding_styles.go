package services

import (
	"encoding/json"
	"os"
	"strings"
	"text/template"

	"ebersolve.com/updater/internal"
	"ebersolve.com/updater/internal/utils"
	"github.com/go-git/go-git/v5"
	"go.uber.org/zap"
)

type UpdateCodingStyles struct {
	logger          *zap.Logger
	commandExecutor utils.CommandExecutor
	config          internal.Config
}

type PHPCSReturn struct {
	Files map[string]struct {
		Errors   int `json:"errors"`
		Warnings int `json:"warnings"`
		Messages []struct {
			Message  string `json:"message"`
			Source   string `json:"source"`
			Severity int    `json:"severity"`
			Fixable  bool   `json:"fixable"`
			Type     string `json:"type"`
			Line     int    `json:"line"`
			Column   int    `json:"column"`
		} `json:"messages"`
	} `json:"files"`
	Totals struct {
		Errors   int `json:"errors"`
		Warnings int `json:"warnings"`
		Fixable  int `json:"fixable"`
	} `json:"totals"`
}

func newUpdateCodingStyles(logger *zap.Logger, commandExecutor utils.CommandExecutor, config internal.Config) *UpdateCodingStyles {
	return &UpdateCodingStyles{
		logger:          logger,
		commandExecutor: commandExecutor,
		config:          config,
	}
}

var fileExists = func(path string) bool {

	if _, err := os.Stat(path + "/phpcs.xml"); os.IsNotExist(err) {
		if _, err := os.Stat(path + "/phpcs.xml.dist"); os.IsNotExist(err) {
			return false
		}
	}
	return true
}

func (h *UpdateCodingStyles) Execute(path string, worktree internal.Worktree) error {

	if h.config.SkipCBF {
		h.logger.Debug("skipping coding styles update")
		return nil
	}

	h.logger.Info("updating coding styles")

	if !fileExists(path) {
		created, err := h.CreatePHPCSConfig(path, worktree)
		if err != nil {
			return err
		}
		if !created {
			h.logger.Debug("no phpcs.xml created, skipping coding style update")
			return nil
		}
	}

	if installed, _ := h.commandExecutor.IsPackageInstalled(path, "drupal/coder"); !installed {
		if err := h.InstallCoder(path, worktree); err != nil {
			return err
		}
	}

	out, err := h.commandExecutor.RunPHPCS(path)
	if err != nil {
		h.logger.Error("failed to run phpcs", zap.Error(err))
		return err
	}

	var codingStyleUpdateResult PHPCSReturn
	if err := json.Unmarshal([]byte(out), &codingStyleUpdateResult); err != nil {
		return err
	}

	if codingStyleUpdateResult.Totals.Fixable == 0 {
		h.logger.Debug("no coding style issues found")
		return nil
	}

	err = h.commandExecutor.RunPHPCBF(path)
	if err != nil {
		h.logger.Debug("remaining issues", zap.Error(err))
	}

	h.logger.Debug("adding files to commit", zap.Any("files", codingStyleUpdateResult.Files))

	for file := range codingStyleUpdateResult.Files {

		if (codingStyleUpdateResult.Files[file].Errors + codingStyleUpdateResult.Files[file].Warnings) == 0 {
			continue
		}
		relativePath := strings.TrimLeft(strings.TrimPrefix(file, path), "/")

		if _, err := worktree.Add(relativePath); err != nil {
			h.logger.Error("failed to add file to commit", zap.Error(err))
			return err
		}
	}

	_, err = worktree.Commit("Update coding styles", &git.CommitOptions{})
	return err
}

func (h *UpdateCodingStyles) CreatePHPCSConfig(path string, worktree internal.Worktree) (bool, error) {
	h.logger.Debug("no phpcs.xml or phpcs.xml.dist file found, creating phpcs.xml")

	phpcsTemplate := `<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="drupal-updater">
    <description>PHP CodeSniffer configuration generated by Drupal Updater</description>
    {{- range .Files }}
    <file>{{ . }}</file>
    {{- end }}
    <arg name="extensions" value="php,module,inc,install,test,profile,theme"/>
    <config name="drupal_core_version" value="{{ .Version }}"/>
    <rule ref="Drupal"/>
    <rule ref="DrupalPractice"/>
</ruleset>
`

	// Parse the template
	tmpl, err := template.New("ruleset").Parse(phpcsTemplate)
	if err != nil {
		panic(err)
	}

	// Create the output file
	outputFile, err := os.Create(path + "/phpcs.xml")
	if err != nil {
		panic(err)
	}

	drupalVersion, _ := h.commandExecutor.GetInstalledPackageVersion(path, "drupal/core")
	majorVersion := strings.Split(drupalVersion, ".")[0]

	data := struct {
		Files   []string
		Version string
	}{
		Files:   []string{},
		Version: majorVersion,
	}

	data.Files, err = h.commandExecutor.GetCustomCodeDirectories(path)
	if err != nil {
		return false, err
	}

	if len(data.Files) == 0 {
		h.logger.Debug("no custom code directories found, skipping coding style update")
		return false, nil
	}

	// Execute the template and write to the file
	err = tmpl.Execute(outputFile, data)
	if err != nil {
		panic(err)
	}

	outputFile.Close()

	if _, err := worktree.Add("phpcs.xml"); err != nil {
		h.logger.Error("failed to add file to commit", zap.Error(err))
		return false, err
	}

	if _, err = worktree.Commit("Add PHPCS config", &git.CommitOptions{}); err != nil {
		return false, err
	}

	return true, nil
}

func (h *UpdateCodingStyles) InstallCoder(path string, worktree internal.Worktree) error {
	h.logger.Debug("drupal/coder is not installed, installing")
	if _, err := h.commandExecutor.InstallPackages(path, "--dev", "drupal/coder"); err != nil {
		return err
	}

	if err := worktree.AddGlob("composer.*"); err != nil {
		h.logger.Error("failed to add file to commit", zap.Error(err))
		return err
	}
	if _, err := worktree.Commit("Install drupal/coder", &git.CommitOptions{}); err != nil {
		return err
	}

	return nil
}
