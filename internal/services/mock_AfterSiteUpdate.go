// Code generated by mockery v2.53.3. DO NOT EDIT.

package services

import (
	internal "drupdater/internal"

	mock "github.com/stretchr/testify/mock"
)

// MockAfterSiteUpdate is an autogenerated mock type for the AfterSiteUpdate type
type MockAfterSiteUpdate struct {
	mock.Mock
}

type MockAfterSiteUpdate_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAfterSiteUpdate) EXPECT() *MockAfterSiteUpdate_Expecter {
	return &MockAfterSiteUpdate_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: path, worktree, site
func (_m *MockAfterSiteUpdate) Execute(path string, worktree internal.Worktree, site string) error {
	ret := _m.Called(path, worktree, site)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, internal.Worktree, string) error); ok {
		r0 = rf(path, worktree, site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAfterSiteUpdate_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAfterSiteUpdate_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - path string
//   - worktree internal.Worktree
//   - site string
func (_e *MockAfterSiteUpdate_Expecter) Execute(path interface{}, worktree interface{}, site interface{}) *MockAfterSiteUpdate_Execute_Call {
	return &MockAfterSiteUpdate_Execute_Call{Call: _e.mock.On("Execute", path, worktree, site)}
}

func (_c *MockAfterSiteUpdate_Execute_Call) Run(run func(path string, worktree internal.Worktree, site string)) *MockAfterSiteUpdate_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(internal.Worktree), args[2].(string))
	})
	return _c
}

func (_c *MockAfterSiteUpdate_Execute_Call) Return(_a0 error) *MockAfterSiteUpdate_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAfterSiteUpdate_Execute_Call) RunAndReturn(run func(string, internal.Worktree, string) error) *MockAfterSiteUpdate_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAfterSiteUpdate creates a new instance of MockAfterSiteUpdate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAfterSiteUpdate(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAfterSiteUpdate {
	mock := &MockAfterSiteUpdate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
