// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package addon

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAddon creates a new instance of MockAddon. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddon(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddon {
	mock := &MockAddon{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAddon is an autogenerated mock type for the Addon type
type MockAddon struct {
	mock.Mock
}

type MockAddon_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddon) EXPECT() *MockAddon_Expecter {
	return &MockAddon_Expecter{mock: &_m.Mock}
}

// RenderTemplate provides a mock function for the type MockAddon
func (_mock *MockAddon) RenderTemplate() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAddon_RenderTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplate'
type MockAddon_RenderTemplate_Call struct {
	*mock.Call
}

// RenderTemplate is a helper method to define mock.On call
func (_e *MockAddon_Expecter) RenderTemplate() *MockAddon_RenderTemplate_Call {
	return &MockAddon_RenderTemplate_Call{Call: _e.mock.On("RenderTemplate")}
}

func (_c *MockAddon_RenderTemplate_Call) Run(run func()) *MockAddon_RenderTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddon_RenderTemplate_Call) Return(s string, err error) *MockAddon_RenderTemplate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAddon_RenderTemplate_Call) RunAndReturn(run func() (string, error)) *MockAddon_RenderTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribedEvents provides a mock function for the type MockAddon
func (_mock *MockAddon) SubscribedEvents() map[string]any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubscribedEvents")
	}

	var r0 map[string]any
	if returnFunc, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}
	return r0
}

// MockAddon_SubscribedEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribedEvents'
type MockAddon_SubscribedEvents_Call struct {
	*mock.Call
}

// SubscribedEvents is a helper method to define mock.On call
func (_e *MockAddon_Expecter) SubscribedEvents() *MockAddon_SubscribedEvents_Call {
	return &MockAddon_SubscribedEvents_Call{Call: _e.mock.On("SubscribedEvents")}
}

func (_c *MockAddon_SubscribedEvents_Call) Run(run func()) *MockAddon_SubscribedEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAddon_SubscribedEvents_Call) Return(stringToV map[string]any) *MockAddon_SubscribedEvents_Call {
	_c.Call.Return(stringToV)
	return _c
}

func (_c *MockAddon_SubscribedEvents_Call) RunAndReturn(run func() map[string]any) *MockAddon_SubscribedEvents_Call {
	_c.Call.Return(run)
	return _c
}
