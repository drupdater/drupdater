// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package addon

import (
	"context"

	"github.com/drupdater/drupdater/pkg/composer"
	"github.com/drupdater/drupdater/pkg/drupalorg"
	"github.com/drupdater/drupdater/pkg/drush"
	"github.com/drupdater/drupdater/pkg/phpcs"
	"github.com/drupdater/drupdater/pkg/rector"
	"github.com/drupdater/drupdater/pkg/repo"
	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing"
	mock "github.com/stretchr/testify/mock"
)

// NewMockComposer creates a new instance of MockComposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComposer {
	mock := &MockComposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComposer is an autogenerated mock type for the Composer type
type MockComposer struct {
	mock.Mock
}

type MockComposer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComposer) EXPECT() *MockComposer_Expecter {
	return &MockComposer_Expecter{mock: &_m.Mock}
}

// Audit provides a mock function for the type MockComposer
func (_mock *MockComposer) Audit(ctx context.Context, dir string) (composer.Audit, error) {
	ret := _mock.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for Audit")
	}

	var r0 composer.Audit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (composer.Audit, error)); ok {
		return returnFunc(ctx, dir)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) composer.Audit); ok {
		r0 = returnFunc(ctx, dir)
	} else {
		r0 = ret.Get(0).(composer.Audit)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, dir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_Audit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Audit'
type MockComposer_Audit_Call struct {
	*mock.Call
}

// Audit is a helper method to define mock.On call
//   - ctx
//   - dir
func (_e *MockComposer_Expecter) Audit(ctx interface{}, dir interface{}) *MockComposer_Audit_Call {
	return &MockComposer_Audit_Call{Call: _e.mock.On("Audit", ctx, dir)}
}

func (_c *MockComposer_Audit_Call) Run(run func(ctx context.Context, dir string)) *MockComposer_Audit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComposer_Audit_Call) Return(audit composer.Audit, err error) *MockComposer_Audit_Call {
	_c.Call.Return(audit, err)
	return _c
}

func (_c *MockComposer_Audit_Call) RunAndReturn(run func(ctx context.Context, dir string) (composer.Audit, error)) *MockComposer_Audit_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIfPatchApplies provides a mock function for the type MockComposer
func (_mock *MockComposer) CheckIfPatchApplies(ctx context.Context, packageName string, packageVersion string, patchPath string) (bool, error) {
	ret := _mock.Called(ctx, packageName, packageVersion, patchPath)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfPatchApplies")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return returnFunc(ctx, packageName, packageVersion, patchPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = returnFunc(ctx, packageName, packageVersion, patchPath)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, packageName, packageVersion, patchPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_CheckIfPatchApplies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfPatchApplies'
type MockComposer_CheckIfPatchApplies_Call struct {
	*mock.Call
}

// CheckIfPatchApplies is a helper method to define mock.On call
//   - ctx
//   - packageName
//   - packageVersion
//   - patchPath
func (_e *MockComposer_Expecter) CheckIfPatchApplies(ctx interface{}, packageName interface{}, packageVersion interface{}, patchPath interface{}) *MockComposer_CheckIfPatchApplies_Call {
	return &MockComposer_CheckIfPatchApplies_Call{Call: _e.mock.On("CheckIfPatchApplies", ctx, packageName, packageVersion, patchPath)}
}

func (_c *MockComposer_CheckIfPatchApplies_Call) Run(run func(ctx context.Context, packageName string, packageVersion string, patchPath string)) *MockComposer_CheckIfPatchApplies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockComposer_CheckIfPatchApplies_Call) Return(b bool, err error) *MockComposer_CheckIfPatchApplies_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockComposer_CheckIfPatchApplies_Call) RunAndReturn(run func(ctx context.Context, packageName string, packageVersion string, patchPath string) (bool, error)) *MockComposer_CheckIfPatchApplies_Call {
	_c.Call.Return(run)
	return _c
}

// Diff provides a mock function for the type MockComposer
func (_mock *MockComposer) Diff(ctx context.Context, path string, withLinks bool) (string, error) {
	ret := _mock.Called(ctx, path, withLinks)

	if len(ret) == 0 {
		panic("no return value specified for Diff")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (string, error)); ok {
		return returnFunc(ctx, path, withLinks)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = returnFunc(ctx, path, withLinks)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, path, withLinks)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_Diff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Diff'
type MockComposer_Diff_Call struct {
	*mock.Call
}

// Diff is a helper method to define mock.On call
//   - ctx
//   - path
//   - withLinks
func (_e *MockComposer_Expecter) Diff(ctx interface{}, path interface{}, withLinks interface{}) *MockComposer_Diff_Call {
	return &MockComposer_Diff_Call{Call: _e.mock.On("Diff", ctx, path, withLinks)}
}

func (_c *MockComposer_Diff_Call) Run(run func(ctx context.Context, path string, withLinks bool)) *MockComposer_Diff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockComposer_Diff_Call) Return(s string, err error) *MockComposer_Diff_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_Diff_Call) RunAndReturn(run func(ctx context.Context, path string, withLinks bool) (string, error)) *MockComposer_Diff_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllowPlugins provides a mock function for the type MockComposer
func (_mock *MockComposer) GetAllowPlugins(ctx context.Context, dir string) (map[string]bool, error) {
	ret := _mock.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for GetAllowPlugins")
	}

	var r0 map[string]bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]bool, error)); ok {
		return returnFunc(ctx, dir)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]bool); ok {
		r0 = returnFunc(ctx, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, dir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_GetAllowPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllowPlugins'
type MockComposer_GetAllowPlugins_Call struct {
	*mock.Call
}

// GetAllowPlugins is a helper method to define mock.On call
//   - ctx
//   - dir
func (_e *MockComposer_Expecter) GetAllowPlugins(ctx interface{}, dir interface{}) *MockComposer_GetAllowPlugins_Call {
	return &MockComposer_GetAllowPlugins_Call{Call: _e.mock.On("GetAllowPlugins", ctx, dir)}
}

func (_c *MockComposer_GetAllowPlugins_Call) Run(run func(ctx context.Context, dir string)) *MockComposer_GetAllowPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComposer_GetAllowPlugins_Call) Return(stringToBool map[string]bool, err error) *MockComposer_GetAllowPlugins_Call {
	_c.Call.Return(stringToBool, err)
	return _c
}

func (_c *MockComposer_GetAllowPlugins_Call) RunAndReturn(run func(ctx context.Context, dir string) (map[string]bool, error)) *MockComposer_GetAllowPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function for the type MockComposer
func (_mock *MockComposer) GetConfig(ctx context.Context, dir string, key string) (string, error) {
	ret := _mock.Called(ctx, dir, key)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, dir, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, dir, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, dir, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockComposer_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - ctx
//   - dir
//   - key
func (_e *MockComposer_Expecter) GetConfig(ctx interface{}, dir interface{}, key interface{}) *MockComposer_GetConfig_Call {
	return &MockComposer_GetConfig_Call{Call: _e.mock.On("GetConfig", ctx, dir, key)}
}

func (_c *MockComposer_GetConfig_Call) Run(run func(ctx context.Context, dir string, key string)) *MockComposer_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockComposer_GetConfig_Call) Return(s string, err error) *MockComposer_GetConfig_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_GetConfig_Call) RunAndReturn(run func(ctx context.Context, dir string, key string) (string, error)) *MockComposer_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomCodeDirectories provides a mock function for the type MockComposer
func (_mock *MockComposer) GetCustomCodeDirectories(ctx context.Context, dir string) ([]string, error) {
	ret := _mock.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomCodeDirectories")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, dir)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, dir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_GetCustomCodeDirectories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomCodeDirectories'
type MockComposer_GetCustomCodeDirectories_Call struct {
	*mock.Call
}

// GetCustomCodeDirectories is a helper method to define mock.On call
//   - ctx
//   - dir
func (_e *MockComposer_Expecter) GetCustomCodeDirectories(ctx interface{}, dir interface{}) *MockComposer_GetCustomCodeDirectories_Call {
	return &MockComposer_GetCustomCodeDirectories_Call{Call: _e.mock.On("GetCustomCodeDirectories", ctx, dir)}
}

func (_c *MockComposer_GetCustomCodeDirectories_Call) Run(run func(ctx context.Context, dir string)) *MockComposer_GetCustomCodeDirectories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComposer_GetCustomCodeDirectories_Call) Return(strings []string, err error) *MockComposer_GetCustomCodeDirectories_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockComposer_GetCustomCodeDirectories_Call) RunAndReturn(run func(ctx context.Context, dir string) ([]string, error)) *MockComposer_GetCustomCodeDirectories_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstalledPackageVersion provides a mock function for the type MockComposer
func (_mock *MockComposer) GetInstalledPackageVersion(ctx context.Context, dir string, packageName string) (string, error) {
	ret := _mock.Called(ctx, dir, packageName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstalledPackageVersion")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, dir, packageName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, dir, packageName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, dir, packageName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_GetInstalledPackageVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstalledPackageVersion'
type MockComposer_GetInstalledPackageVersion_Call struct {
	*mock.Call
}

// GetInstalledPackageVersion is a helper method to define mock.On call
//   - ctx
//   - dir
//   - packageName
func (_e *MockComposer_Expecter) GetInstalledPackageVersion(ctx interface{}, dir interface{}, packageName interface{}) *MockComposer_GetInstalledPackageVersion_Call {
	return &MockComposer_GetInstalledPackageVersion_Call{Call: _e.mock.On("GetInstalledPackageVersion", ctx, dir, packageName)}
}

func (_c *MockComposer_GetInstalledPackageVersion_Call) Run(run func(ctx context.Context, dir string, packageName string)) *MockComposer_GetInstalledPackageVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockComposer_GetInstalledPackageVersion_Call) Return(s string, err error) *MockComposer_GetInstalledPackageVersion_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_GetInstalledPackageVersion_Call) RunAndReturn(run func(ctx context.Context, dir string, packageName string) (string, error)) *MockComposer_GetInstalledPackageVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstalledPlugins provides a mock function for the type MockComposer
func (_mock *MockComposer) GetInstalledPlugins(ctx context.Context, dir string) (map[string]interface{}, error) {
	ret := _mock.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for GetInstalledPlugins")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (map[string]interface{}, error)); ok {
		return returnFunc(ctx, dir)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = returnFunc(ctx, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, dir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_GetInstalledPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstalledPlugins'
type MockComposer_GetInstalledPlugins_Call struct {
	*mock.Call
}

// GetInstalledPlugins is a helper method to define mock.On call
//   - ctx
//   - dir
func (_e *MockComposer_Expecter) GetInstalledPlugins(ctx interface{}, dir interface{}) *MockComposer_GetInstalledPlugins_Call {
	return &MockComposer_GetInstalledPlugins_Call{Call: _e.mock.On("GetInstalledPlugins", ctx, dir)}
}

func (_c *MockComposer_GetInstalledPlugins_Call) Run(run func(ctx context.Context, dir string)) *MockComposer_GetInstalledPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComposer_GetInstalledPlugins_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockComposer_GetInstalledPlugins_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockComposer_GetInstalledPlugins_Call) RunAndReturn(run func(ctx context.Context, dir string) (map[string]interface{}, error)) *MockComposer_GetInstalledPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// IsPackageInstalled provides a mock function for the type MockComposer
func (_mock *MockComposer) IsPackageInstalled(ctx context.Context, dir string, packageToCheck string) (bool, error) {
	ret := _mock.Called(ctx, dir, packageToCheck)

	if len(ret) == 0 {
		panic("no return value specified for IsPackageInstalled")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, dir, packageToCheck)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, dir, packageToCheck)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, dir, packageToCheck)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_IsPackageInstalled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPackageInstalled'
type MockComposer_IsPackageInstalled_Call struct {
	*mock.Call
}

// IsPackageInstalled is a helper method to define mock.On call
//   - ctx
//   - dir
//   - packageToCheck
func (_e *MockComposer_Expecter) IsPackageInstalled(ctx interface{}, dir interface{}, packageToCheck interface{}) *MockComposer_IsPackageInstalled_Call {
	return &MockComposer_IsPackageInstalled_Call{Call: _e.mock.On("IsPackageInstalled", ctx, dir, packageToCheck)}
}

func (_c *MockComposer_IsPackageInstalled_Call) Run(run func(ctx context.Context, dir string, packageToCheck string)) *MockComposer_IsPackageInstalled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockComposer_IsPackageInstalled_Call) Return(b bool, err error) *MockComposer_IsPackageInstalled_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockComposer_IsPackageInstalled_Call) RunAndReturn(run func(ctx context.Context, dir string, packageToCheck string) (bool, error)) *MockComposer_IsPackageInstalled_Call {
	_c.Call.Return(run)
	return _c
}

// Normalize provides a mock function for the type MockComposer
func (_mock *MockComposer) Normalize(ctx context.Context, dir string) (string, error) {
	ret := _mock.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for Normalize")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, dir)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, dir)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, dir)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_Normalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Normalize'
type MockComposer_Normalize_Call struct {
	*mock.Call
}

// Normalize is a helper method to define mock.On call
//   - ctx
//   - dir
func (_e *MockComposer_Expecter) Normalize(ctx interface{}, dir interface{}) *MockComposer_Normalize_Call {
	return &MockComposer_Normalize_Call{Call: _e.mock.On("Normalize", ctx, dir)}
}

func (_c *MockComposer_Normalize_Call) Run(run func(ctx context.Context, dir string)) *MockComposer_Normalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComposer_Normalize_Call) Return(s string, err error) *MockComposer_Normalize_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_Normalize_Call) RunAndReturn(run func(ctx context.Context, dir string) (string, error)) *MockComposer_Normalize_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockComposer
func (_mock *MockComposer) Remove(ctx context.Context, dir string, packages ...string) (string, error) {
	var tmpRet mock.Arguments
	if len(packages) > 0 {
		tmpRet = _mock.Called(ctx, dir, packages)
	} else {
		tmpRet = _mock.Called(ctx, dir)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) (string, error)); ok {
		return returnFunc(ctx, dir, packages...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) string); ok {
		r0 = returnFunc(ctx, dir, packages...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = returnFunc(ctx, dir, packages...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockComposer_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx
//   - dir
//   - packages
func (_e *MockComposer_Expecter) Remove(ctx interface{}, dir interface{}, packages ...interface{}) *MockComposer_Remove_Call {
	return &MockComposer_Remove_Call{Call: _e.mock.On("Remove",
		append([]interface{}{ctx, dir}, packages...)...)}
}

func (_c *MockComposer_Remove_Call) Run(run func(ctx context.Context, dir string, packages ...string)) *MockComposer_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]string)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockComposer_Remove_Call) Return(s string, err error) *MockComposer_Remove_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_Remove_Call) RunAndReturn(run func(ctx context.Context, dir string, packages ...string) (string, error)) *MockComposer_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Require provides a mock function for the type MockComposer
func (_mock *MockComposer) Require(ctx context.Context, dir string, args ...string) (string, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, dir, args)
	} else {
		tmpRet = _mock.Called(ctx, dir)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Require")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) (string, error)); ok {
		return returnFunc(ctx, dir, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...string) string); ok {
		r0 = returnFunc(ctx, dir, args...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = returnFunc(ctx, dir, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_Require_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Require'
type MockComposer_Require_Call struct {
	*mock.Call
}

// Require is a helper method to define mock.On call
//   - ctx
//   - dir
//   - args
func (_e *MockComposer_Expecter) Require(ctx interface{}, dir interface{}, args ...interface{}) *MockComposer_Require_Call {
	return &MockComposer_Require_Call{Call: _e.mock.On("Require",
		append([]interface{}{ctx, dir}, args...)...)}
}

func (_c *MockComposer_Require_Call) Run(run func(ctx context.Context, dir string, args ...string)) *MockComposer_Require_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]string)
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockComposer_Require_Call) Return(s string, err error) *MockComposer_Require_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_Require_Call) RunAndReturn(run func(ctx context.Context, dir string, args ...string) (string, error)) *MockComposer_Require_Call {
	_c.Call.Return(run)
	return _c
}

// SetAllowPlugins provides a mock function for the type MockComposer
func (_mock *MockComposer) SetAllowPlugins(ctx context.Context, dir string, plugins map[string]bool) error {
	ret := _mock.Called(ctx, dir, plugins)

	if len(ret) == 0 {
		panic("no return value specified for SetAllowPlugins")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]bool) error); ok {
		r0 = returnFunc(ctx, dir, plugins)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComposer_SetAllowPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAllowPlugins'
type MockComposer_SetAllowPlugins_Call struct {
	*mock.Call
}

// SetAllowPlugins is a helper method to define mock.On call
//   - ctx
//   - dir
//   - plugins
func (_e *MockComposer_Expecter) SetAllowPlugins(ctx interface{}, dir interface{}, plugins interface{}) *MockComposer_SetAllowPlugins_Call {
	return &MockComposer_SetAllowPlugins_Call{Call: _e.mock.On("SetAllowPlugins", ctx, dir, plugins)}
}

func (_c *MockComposer_SetAllowPlugins_Call) Run(run func(ctx context.Context, dir string, plugins map[string]bool)) *MockComposer_SetAllowPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]bool))
	})
	return _c
}

func (_c *MockComposer_SetAllowPlugins_Call) Return(err error) *MockComposer_SetAllowPlugins_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComposer_SetAllowPlugins_Call) RunAndReturn(run func(ctx context.Context, dir string, plugins map[string]bool) error) *MockComposer_SetAllowPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function for the type MockComposer
func (_mock *MockComposer) SetConfig(ctx context.Context, dir string, key string, value string) error {
	ret := _mock.Called(ctx, dir, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, dir, key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComposer_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type MockComposer_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - ctx
//   - dir
//   - key
//   - value
func (_e *MockComposer_Expecter) SetConfig(ctx interface{}, dir interface{}, key interface{}, value interface{}) *MockComposer_SetConfig_Call {
	return &MockComposer_SetConfig_Call{Call: _e.mock.On("SetConfig", ctx, dir, key, value)}
}

func (_c *MockComposer_SetConfig_Call) Run(run func(ctx context.Context, dir string, key string, value string)) *MockComposer_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockComposer_SetConfig_Call) Return(err error) *MockComposer_SetConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComposer_SetConfig_Call) RunAndReturn(run func(ctx context.Context, dir string, key string, value string) error) *MockComposer_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockComposer
func (_mock *MockComposer) Update(ctx context.Context, dir string, packagesToUpdate []string, packagesToKeep []string, minimalChanges bool, dryRun bool) ([]composer.PackageChange, error) {
	ret := _mock.Called(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 []composer.PackageChange
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string, bool, bool) ([]composer.PackageChange, error)); ok {
		return returnFunc(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string, []string, bool, bool) []composer.PackageChange); ok {
		r0 = returnFunc(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]composer.PackageChange)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string, []string, bool, bool) error); ok {
		r1 = returnFunc(ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockComposer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - dir
//   - packagesToUpdate
//   - packagesToKeep
//   - minimalChanges
//   - dryRun
func (_e *MockComposer_Expecter) Update(ctx interface{}, dir interface{}, packagesToUpdate interface{}, packagesToKeep interface{}, minimalChanges interface{}, dryRun interface{}) *MockComposer_Update_Call {
	return &MockComposer_Update_Call{Call: _e.mock.On("Update", ctx, dir, packagesToUpdate, packagesToKeep, minimalChanges, dryRun)}
}

func (_c *MockComposer_Update_Call) Run(run func(ctx context.Context, dir string, packagesToUpdate []string, packagesToKeep []string, minimalChanges bool, dryRun bool)) *MockComposer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].([]string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *MockComposer_Update_Call) Return(packageChanges []composer.PackageChange, err error) *MockComposer_Update_Call {
	_c.Call.Return(packageChanges, err)
	return _c
}

func (_c *MockComposer_Update_Call) RunAndReturn(run func(ctx context.Context, dir string, packagesToUpdate []string, packagesToKeep []string, minimalChanges bool, dryRun bool) ([]composer.PackageChange, error)) *MockComposer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLockHash provides a mock function for the type MockComposer
func (_mock *MockComposer) UpdateLockHash(ctx context.Context, dir string) error {
	ret := _mock.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLockHash")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, dir)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComposer_UpdateLockHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLockHash'
type MockComposer_UpdateLockHash_Call struct {
	*mock.Call
}

// UpdateLockHash is a helper method to define mock.On call
//   - ctx
//   - dir
func (_e *MockComposer_Expecter) UpdateLockHash(ctx interface{}, dir interface{}) *MockComposer_UpdateLockHash_Call {
	return &MockComposer_UpdateLockHash_Call{Call: _e.mock.On("UpdateLockHash", ctx, dir)}
}

func (_c *MockComposer_UpdateLockHash_Call) Run(run func(ctx context.Context, dir string)) *MockComposer_UpdateLockHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComposer_UpdateLockHash_Call) Return(err error) *MockComposer_UpdateLockHash_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComposer_UpdateLockHash_Call) RunAndReturn(run func(ctx context.Context, dir string) error) *MockComposer_UpdateLockHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDrush creates a new instance of MockDrush. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDrush(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDrush {
	mock := &MockDrush{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDrush is an autogenerated mock type for the Drush type
type MockDrush struct {
	mock.Mock
}

type MockDrush_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDrush) EXPECT() *MockDrush_Expecter {
	return &MockDrush_Expecter{mock: &_m.Mock}
}

// GetTranslationPath provides a mock function for the type MockDrush
func (_mock *MockDrush) GetTranslationPath(ctx context.Context, dir string, site string, relative bool) (string, error) {
	ret := _mock.Called(ctx, dir, site, relative)

	if len(ret) == 0 {
		panic("no return value specified for GetTranslationPath")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) (string, error)); ok {
		return returnFunc(ctx, dir, site, relative)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) string); ok {
		r0 = returnFunc(ctx, dir, site, relative)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = returnFunc(ctx, dir, site, relative)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDrush_GetTranslationPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTranslationPath'
type MockDrush_GetTranslationPath_Call struct {
	*mock.Call
}

// GetTranslationPath is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
//   - relative
func (_e *MockDrush_Expecter) GetTranslationPath(ctx interface{}, dir interface{}, site interface{}, relative interface{}) *MockDrush_GetTranslationPath_Call {
	return &MockDrush_GetTranslationPath_Call{Call: _e.mock.On("GetTranslationPath", ctx, dir, site, relative)}
}

func (_c *MockDrush_GetTranslationPath_Call) Run(run func(ctx context.Context, dir string, site string, relative bool)) *MockDrush_GetTranslationPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockDrush_GetTranslationPath_Call) Return(s string, err error) *MockDrush_GetTranslationPath_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDrush_GetTranslationPath_Call) RunAndReturn(run func(ctx context.Context, dir string, site string, relative bool) (string, error)) *MockDrush_GetTranslationPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdateHooks provides a mock function for the type MockDrush
func (_mock *MockDrush) GetUpdateHooks(ctx context.Context, dir string, site string) (map[string]drush.UpdateHook, error) {
	ret := _mock.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdateHooks")
	}

	var r0 map[string]drush.UpdateHook
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (map[string]drush.UpdateHook, error)); ok {
		return returnFunc(ctx, dir, site)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) map[string]drush.UpdateHook); ok {
		r0 = returnFunc(ctx, dir, site)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]drush.UpdateHook)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, dir, site)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDrush_GetUpdateHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdateHooks'
type MockDrush_GetUpdateHooks_Call struct {
	*mock.Call
}

// GetUpdateHooks is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
func (_e *MockDrush_Expecter) GetUpdateHooks(ctx interface{}, dir interface{}, site interface{}) *MockDrush_GetUpdateHooks_Call {
	return &MockDrush_GetUpdateHooks_Call{Call: _e.mock.On("GetUpdateHooks", ctx, dir, site)}
}

func (_c *MockDrush_GetUpdateHooks_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrush_GetUpdateHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrush_GetUpdateHooks_Call) Return(stringToUpdateHook map[string]drush.UpdateHook, err error) *MockDrush_GetUpdateHooks_Call {
	_c.Call.Return(stringToUpdateHook, err)
	return _c
}

func (_c *MockDrush_GetUpdateHooks_Call) RunAndReturn(run func(ctx context.Context, dir string, site string) (map[string]drush.UpdateHook, error)) *MockDrush_GetUpdateHooks_Call {
	_c.Call.Return(run)
	return _c
}

// IsModuleEnabled provides a mock function for the type MockDrush
func (_mock *MockDrush) IsModuleEnabled(ctx context.Context, dir string, site string, module string) (bool, error) {
	ret := _mock.Called(ctx, dir, site, module)

	if len(ret) == 0 {
		panic("no return value specified for IsModuleEnabled")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return returnFunc(ctx, dir, site, module)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = returnFunc(ctx, dir, site, module)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, dir, site, module)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDrush_IsModuleEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModuleEnabled'
type MockDrush_IsModuleEnabled_Call struct {
	*mock.Call
}

// IsModuleEnabled is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
//   - module
func (_e *MockDrush_Expecter) IsModuleEnabled(ctx interface{}, dir interface{}, site interface{}, module interface{}) *MockDrush_IsModuleEnabled_Call {
	return &MockDrush_IsModuleEnabled_Call{Call: _e.mock.On("IsModuleEnabled", ctx, dir, site, module)}
}

func (_c *MockDrush_IsModuleEnabled_Call) Run(run func(ctx context.Context, dir string, site string, module string)) *MockDrush_IsModuleEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDrush_IsModuleEnabled_Call) Return(b bool, err error) *MockDrush_IsModuleEnabled_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockDrush_IsModuleEnabled_Call) RunAndReturn(run func(ctx context.Context, dir string, site string, module string) (bool, error)) *MockDrush_IsModuleEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// LocalizeTranslations provides a mock function for the type MockDrush
func (_mock *MockDrush) LocalizeTranslations(ctx context.Context, dir string, site string) error {
	ret := _mock.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for LocalizeTranslations")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDrush_LocalizeTranslations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalizeTranslations'
type MockDrush_LocalizeTranslations_Call struct {
	*mock.Call
}

// LocalizeTranslations is a helper method to define mock.On call
//   - ctx
//   - dir
//   - site
func (_e *MockDrush_Expecter) LocalizeTranslations(ctx interface{}, dir interface{}, site interface{}) *MockDrush_LocalizeTranslations_Call {
	return &MockDrush_LocalizeTranslations_Call{Call: _e.mock.On("LocalizeTranslations", ctx, dir, site)}
}

func (_c *MockDrush_LocalizeTranslations_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrush_LocalizeTranslations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrush_LocalizeTranslations_Call) Return(err error) *MockDrush_LocalizeTranslations_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDrush_LocalizeTranslations_Call) RunAndReturn(run func(ctx context.Context, dir string, site string) error) *MockDrush_LocalizeTranslations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPHPCS creates a new instance of MockPHPCS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPHPCS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPHPCS {
	mock := &MockPHPCS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPHPCS is an autogenerated mock type for the PHPCS type
type MockPHPCS struct {
	mock.Mock
}

type MockPHPCS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPHPCS) EXPECT() *MockPHPCS_Expecter {
	return &MockPHPCS_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockPHPCS
func (_mock *MockPHPCS) Run(ctx context.Context, path string) (phpcs.ReturnOutput, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 phpcs.ReturnOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (phpcs.ReturnOutput, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) phpcs.ReturnOutput); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Get(0).(phpcs.ReturnOutput)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPHPCS_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockPHPCS_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx
//   - path
func (_e *MockPHPCS_Expecter) Run(ctx interface{}, path interface{}) *MockPHPCS_Run_Call {
	return &MockPHPCS_Run_Call{Call: _e.mock.On("Run", ctx, path)}
}

func (_c *MockPHPCS_Run_Call) Run(run func(ctx context.Context, path string)) *MockPHPCS_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPHPCS_Run_Call) Return(returnOutput phpcs.ReturnOutput, err error) *MockPHPCS_Run_Call {
	_c.Call.Return(returnOutput, err)
	return _c
}

func (_c *MockPHPCS_Run_Call) RunAndReturn(run func(ctx context.Context, path string) (phpcs.ReturnOutput, error)) *MockPHPCS_Run_Call {
	_c.Call.Return(run)
	return _c
}

// RunCBF provides a mock function for the type MockPHPCS
func (_mock *MockPHPCS) RunCBF(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for RunCBF")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPHPCS_RunCBF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCBF'
type MockPHPCS_RunCBF_Call struct {
	*mock.Call
}

// RunCBF is a helper method to define mock.On call
//   - ctx
//   - path
func (_e *MockPHPCS_Expecter) RunCBF(ctx interface{}, path interface{}) *MockPHPCS_RunCBF_Call {
	return &MockPHPCS_RunCBF_Call{Call: _e.mock.On("RunCBF", ctx, path)}
}

func (_c *MockPHPCS_RunCBF_Call) Run(run func(ctx context.Context, path string)) *MockPHPCS_RunCBF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPHPCS_RunCBF_Call) Return(err error) *MockPHPCS_RunCBF_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPHPCS_RunCBF_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockPHPCS_RunCBF_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// IsSomethingStagedInPath provides a mock function for the type MockRepository
func (_mock *MockRepository) IsSomethingStagedInPath(worktree repo.Worktree, dir string) bool {
	ret := _mock.Called(worktree, dir)

	if len(ret) == 0 {
		panic("no return value specified for IsSomethingStagedInPath")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(repo.Worktree, string) bool); ok {
		r0 = returnFunc(worktree, dir)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRepository_IsSomethingStagedInPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSomethingStagedInPath'
type MockRepository_IsSomethingStagedInPath_Call struct {
	*mock.Call
}

// IsSomethingStagedInPath is a helper method to define mock.On call
//   - worktree
//   - dir
func (_e *MockRepository_Expecter) IsSomethingStagedInPath(worktree interface{}, dir interface{}) *MockRepository_IsSomethingStagedInPath_Call {
	return &MockRepository_IsSomethingStagedInPath_Call{Call: _e.mock.On("IsSomethingStagedInPath", worktree, dir)}
}

func (_c *MockRepository_IsSomethingStagedInPath_Call) Run(run func(worktree repo.Worktree, dir string)) *MockRepository_IsSomethingStagedInPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repo.Worktree), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_IsSomethingStagedInPath_Call) Return(b bool) *MockRepository_IsSomethingStagedInPath_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRepository_IsSomethingStagedInPath_Call) RunAndReturn(run func(worktree repo.Worktree, dir string) bool) *MockRepository_IsSomethingStagedInPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDrupalOrg creates a new instance of MockDrupalOrg. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDrupalOrg(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDrupalOrg {
	mock := &MockDrupalOrg{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDrupalOrg is an autogenerated mock type for the DrupalOrg type
type MockDrupalOrg struct {
	mock.Mock
}

type MockDrupalOrg_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDrupalOrg) EXPECT() *MockDrupalOrg_Expecter {
	return &MockDrupalOrg_Expecter{mock: &_m.Mock}
}

// FindIssueNumber provides a mock function for the type MockDrupalOrg
func (_mock *MockDrupalOrg) FindIssueNumber(text string) (string, bool) {
	ret := _mock.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for FindIssueNumber")
	}

	var r0 string
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return returnFunc(text)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(text)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(text)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockDrupalOrg_FindIssueNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindIssueNumber'
type MockDrupalOrg_FindIssueNumber_Call struct {
	*mock.Call
}

// FindIssueNumber is a helper method to define mock.On call
//   - text
func (_e *MockDrupalOrg_Expecter) FindIssueNumber(text interface{}) *MockDrupalOrg_FindIssueNumber_Call {
	return &MockDrupalOrg_FindIssueNumber_Call{Call: _e.mock.On("FindIssueNumber", text)}
}

func (_c *MockDrupalOrg_FindIssueNumber_Call) Run(run func(text string)) *MockDrupalOrg_FindIssueNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDrupalOrg_FindIssueNumber_Call) Return(s string, b bool) *MockDrupalOrg_FindIssueNumber_Call {
	_c.Call.Return(s, b)
	return _c
}

func (_c *MockDrupalOrg_FindIssueNumber_Call) RunAndReturn(run func(text string) (string, bool)) *MockDrupalOrg_FindIssueNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssue provides a mock function for the type MockDrupalOrg
func (_mock *MockDrupalOrg) GetIssue(issueID string) (*drupalorg.Issue, error) {
	ret := _mock.Called(issueID)

	if len(ret) == 0 {
		panic("no return value specified for GetIssue")
	}

	var r0 *drupalorg.Issue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*drupalorg.Issue, error)); ok {
		return returnFunc(issueID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *drupalorg.Issue); ok {
		r0 = returnFunc(issueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drupalorg.Issue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(issueID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDrupalOrg_GetIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssue'
type MockDrupalOrg_GetIssue_Call struct {
	*mock.Call
}

// GetIssue is a helper method to define mock.On call
//   - issueID
func (_e *MockDrupalOrg_Expecter) GetIssue(issueID interface{}) *MockDrupalOrg_GetIssue_Call {
	return &MockDrupalOrg_GetIssue_Call{Call: _e.mock.On("GetIssue", issueID)}
}

func (_c *MockDrupalOrg_GetIssue_Call) Run(run func(issueID string)) *MockDrupalOrg_GetIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDrupalOrg_GetIssue_Call) Return(issue *drupalorg.Issue, err error) *MockDrupalOrg_GetIssue_Call {
	_c.Call.Return(issue, err)
	return _c
}

func (_c *MockDrupalOrg_GetIssue_Call) RunAndReturn(run func(issueID string) (*drupalorg.Issue, error)) *MockDrupalOrg_GetIssue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRector creates a new instance of MockRector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRector {
	mock := &MockRector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRector is an autogenerated mock type for the Rector type
type MockRector struct {
	mock.Mock
}

type MockRector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRector) EXPECT() *MockRector_Expecter {
	return &MockRector_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockRector
func (_mock *MockRector) Run(ctx context.Context, dir string, customCodeDirectories []string) (rector.ReturnOutput, error) {
	ret := _mock.Called(ctx, dir, customCodeDirectories)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 rector.ReturnOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) (rector.ReturnOutput, error)); ok {
		return returnFunc(ctx, dir, customCodeDirectories)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) rector.ReturnOutput); ok {
		r0 = returnFunc(ctx, dir, customCodeDirectories)
	} else {
		r0 = ret.Get(0).(rector.ReturnOutput)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, dir, customCodeDirectories)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRector_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRector_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx
//   - dir
//   - customCodeDirectories
func (_e *MockRector_Expecter) Run(ctx interface{}, dir interface{}, customCodeDirectories interface{}) *MockRector_Run_Call {
	return &MockRector_Run_Call{Call: _e.mock.On("Run", ctx, dir, customCodeDirectories)}
}

func (_c *MockRector_Run_Call) Run(run func(ctx context.Context, dir string, customCodeDirectories []string)) *MockRector_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRector_Run_Call) Return(returnOutput rector.ReturnOutput, err error) *MockRector_Run_Call {
	_c.Call.Return(returnOutput, err)
	return _c
}

func (_c *MockRector_Run_Call) RunAndReturn(run func(ctx context.Context, dir string, customCodeDirectories []string) (rector.ReturnOutput, error)) *MockRector_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorktree creates a new instance of MockWorktree. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorktree(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorktree {
	mock := &MockWorktree{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorktree is an autogenerated mock type for the Worktree type
type MockWorktree struct {
	mock.Mock
}

type MockWorktree_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorktree) EXPECT() *MockWorktree_Expecter {
	return &MockWorktree_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Add(path string) (plumbing.Hash, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 plumbing.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (plumbing.Hash, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) plumbing.Hash); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockWorktree_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - path
func (_e *MockWorktree_Expecter) Add(path interface{}) *MockWorktree_Add_Call {
	return &MockWorktree_Add_Call{Call: _e.mock.On("Add", path)}
}

func (_c *MockWorktree_Add_Call) Run(run func(path string)) *MockWorktree_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWorktree_Add_Call) Return(hash plumbing.Hash, err error) *MockWorktree_Add_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *MockWorktree_Add_Call) RunAndReturn(run func(path string) (plumbing.Hash, error)) *MockWorktree_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddGlob provides a mock function for the type MockWorktree
func (_mock *MockWorktree) AddGlob(pattern string) error {
	ret := _mock.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for AddGlob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(pattern)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorktree_AddGlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGlob'
type MockWorktree_AddGlob_Call struct {
	*mock.Call
}

// AddGlob is a helper method to define mock.On call
//   - pattern
func (_e *MockWorktree_Expecter) AddGlob(pattern interface{}) *MockWorktree_AddGlob_Call {
	return &MockWorktree_AddGlob_Call{Call: _e.mock.On("AddGlob", pattern)}
}

func (_c *MockWorktree_AddGlob_Call) Run(run func(pattern string)) *MockWorktree_AddGlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWorktree_AddGlob_Call) Return(err error) *MockWorktree_AddGlob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorktree_AddGlob_Call) RunAndReturn(run func(pattern string) error) *MockWorktree_AddGlob_Call {
	_c.Call.Return(run)
	return _c
}

// Checkout provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Checkout(opts *git.CheckoutOptions) error {
	ret := _mock.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*git.CheckoutOptions) error); ok {
		r0 = returnFunc(opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorktree_Checkout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Checkout'
type MockWorktree_Checkout_Call struct {
	*mock.Call
}

// Checkout is a helper method to define mock.On call
//   - opts
func (_e *MockWorktree_Expecter) Checkout(opts interface{}) *MockWorktree_Checkout_Call {
	return &MockWorktree_Checkout_Call{Call: _e.mock.On("Checkout", opts)}
}

func (_c *MockWorktree_Checkout_Call) Run(run func(opts *git.CheckoutOptions)) *MockWorktree_Checkout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*git.CheckoutOptions))
	})
	return _c
}

func (_c *MockWorktree_Checkout_Call) Return(err error) *MockWorktree_Checkout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorktree_Checkout_Call) RunAndReturn(run func(opts *git.CheckoutOptions) error) *MockWorktree_Checkout_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Commit(msg string, opts *git.CommitOptions) (plumbing.Hash, error) {
	ret := _mock.Called(msg, opts)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 plumbing.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *git.CommitOptions) (plumbing.Hash, error)); ok {
		return returnFunc(msg, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *git.CommitOptions) plumbing.Hash); ok {
		r0 = returnFunc(msg, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *git.CommitOptions) error); ok {
		r1 = returnFunc(msg, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockWorktree_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - msg
//   - opts
func (_e *MockWorktree_Expecter) Commit(msg interface{}, opts interface{}) *MockWorktree_Commit_Call {
	return &MockWorktree_Commit_Call{Call: _e.mock.On("Commit", msg, opts)}
}

func (_c *MockWorktree_Commit_Call) Run(run func(msg string, opts *git.CommitOptions)) *MockWorktree_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*git.CommitOptions))
	})
	return _c
}

func (_c *MockWorktree_Commit_Call) Return(hash plumbing.Hash, err error) *MockWorktree_Commit_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *MockWorktree_Commit_Call) RunAndReturn(run func(msg string, opts *git.CommitOptions) (plumbing.Hash, error)) *MockWorktree_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Remove(path string) (plumbing.Hash, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 plumbing.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (plumbing.Hash, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) plumbing.Hash); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockWorktree_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path
func (_e *MockWorktree_Expecter) Remove(path interface{}) *MockWorktree_Remove_Call {
	return &MockWorktree_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *MockWorktree_Remove_Call) Run(run func(path string)) *MockWorktree_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWorktree_Remove_Call) Return(hash plumbing.Hash, err error) *MockWorktree_Remove_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *MockWorktree_Remove_Call) RunAndReturn(run func(path string) (plumbing.Hash, error)) *MockWorktree_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Status() (git.Status, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 git.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (git.Status, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() git.Status); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(git.Status)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockWorktree_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockWorktree_Expecter) Status() *MockWorktree_Status_Call {
	return &MockWorktree_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockWorktree_Status_Call) Run(run func()) *MockWorktree_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorktree_Status_Call) Return(status git.Status, err error) *MockWorktree_Status_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockWorktree_Status_Call) RunAndReturn(run func() (git.Status, error)) *MockWorktree_Status_Call {
	_c.Call.Return(run)
	return _c
}
