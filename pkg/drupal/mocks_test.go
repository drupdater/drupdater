// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package drupal

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDrush creates a new instance of MockDrush. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDrush(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDrush {
	mock := &MockDrush{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDrush is an autogenerated mock type for the Drush type
type MockDrush struct {
	mock.Mock
}

type MockDrush_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDrush) EXPECT() *MockDrush_Expecter {
	return &MockDrush_Expecter{mock: &_m.Mock}
}

// GetConfigSyncDir provides a mock function for the type MockDrush
func (_mock *MockDrush) GetConfigSyncDir(ctx context.Context, path string, site string, create bool) (string, error) {
	ret := _mock.Called(ctx, path, site, create)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigSyncDir")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) (string, error)); ok {
		return returnFunc(ctx, path, site, create)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) string); ok {
		r0 = returnFunc(ctx, path, site, create)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = returnFunc(ctx, path, site, create)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDrush_GetConfigSyncDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigSyncDir'
type MockDrush_GetConfigSyncDir_Call struct {
	*mock.Call
}

// GetConfigSyncDir is a helper method to define mock.On call
//   - ctx
//   - path
//   - site
//   - create
func (_e *MockDrush_Expecter) GetConfigSyncDir(ctx interface{}, path interface{}, site interface{}, create interface{}) *MockDrush_GetConfigSyncDir_Call {
	return &MockDrush_GetConfigSyncDir_Call{Call: _e.mock.On("GetConfigSyncDir", ctx, path, site, create)}
}

func (_c *MockDrush_GetConfigSyncDir_Call) Run(run func(ctx context.Context, path string, site string, create bool)) *MockDrush_GetConfigSyncDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockDrush_GetConfigSyncDir_Call) Return(s string, err error) *MockDrush_GetConfigSyncDir_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDrush_GetConfigSyncDir_Call) RunAndReturn(run func(ctx context.Context, path string, site string, create bool) (string, error)) *MockDrush_GetConfigSyncDir_Call {
	_c.Call.Return(run)
	return _c
}

// InstallSite provides a mock function for the type MockDrush
func (_mock *MockDrush) InstallSite(ctx context.Context, path string, site string) error {
	ret := _mock.Called(ctx, path, site)

	if len(ret) == 0 {
		panic("no return value specified for InstallSite")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, path, site)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDrush_InstallSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallSite'
type MockDrush_InstallSite_Call struct {
	*mock.Call
}

// InstallSite is a helper method to define mock.On call
//   - ctx
//   - path
//   - site
func (_e *MockDrush_Expecter) InstallSite(ctx interface{}, path interface{}, site interface{}) *MockDrush_InstallSite_Call {
	return &MockDrush_InstallSite_Call{Call: _e.mock.On("InstallSite", ctx, path, site)}
}

func (_c *MockDrush_InstallSite_Call) Run(run func(ctx context.Context, path string, site string)) *MockDrush_InstallSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrush_InstallSite_Call) Return(err error) *MockDrush_InstallSite_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDrush_InstallSite_Call) RunAndReturn(run func(ctx context.Context, path string, site string) error) *MockDrush_InstallSite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComposer creates a new instance of MockComposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComposer {
	mock := &MockComposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComposer is an autogenerated mock type for the Composer type
type MockComposer struct {
	mock.Mock
}

type MockComposer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComposer) EXPECT() *MockComposer_Expecter {
	return &MockComposer_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function for the type MockComposer
func (_mock *MockComposer) GetConfig(ctx context.Context, path string, key string) (string, error) {
	ret := _mock.Called(ctx, path, key)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, path, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, path, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, path, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComposer_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockComposer_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - ctx
//   - path
//   - key
func (_e *MockComposer_Expecter) GetConfig(ctx interface{}, path interface{}, key interface{}) *MockComposer_GetConfig_Call {
	return &MockComposer_GetConfig_Call{Call: _e.mock.On("GetConfig", ctx, path, key)}
}

func (_c *MockComposer_GetConfig_Call) Run(run func(ctx context.Context, path string, key string)) *MockComposer_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockComposer_GetConfig_Call) Return(s string, err error) *MockComposer_GetConfig_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockComposer_GetConfig_Call) RunAndReturn(run func(ctx context.Context, path string, key string) (string, error)) *MockComposer_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}
