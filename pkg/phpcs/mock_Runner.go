// Code generated by mockery v2.53.3. DO NOT EDIT.

package phpcs

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

type MockRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunner) EXPECT() *MockRunner_Expecter {
	return &MockRunner_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, dir
func (_m *MockRunner) Run(ctx context.Context, dir string) (ReturnOutput, error) {
	ret := _m.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 ReturnOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ReturnOutput, error)); ok {
		return rf(ctx, dir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ReturnOutput); ok {
		r0 = rf(ctx, dir)
	} else {
		r0 = ret.Get(0).(ReturnOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRunner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
func (_e *MockRunner_Expecter) Run(ctx interface{}, dir interface{}) *MockRunner_Run_Call {
	return &MockRunner_Run_Call{Call: _e.mock.On("Run", ctx, dir)}
}

func (_c *MockRunner_Run_Call) Run(run func(ctx context.Context, dir string)) *MockRunner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRunner_Run_Call) Return(_a0 ReturnOutput, _a1 error) *MockRunner_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_Run_Call) RunAndReturn(run func(context.Context, string) (ReturnOutput, error)) *MockRunner_Run_Call {
	_c.Call.Return(run)
	return _c
}

// RunCBF provides a mock function with given fields: ctx, dir
func (_m *MockRunner) RunCBF(ctx context.Context, dir string) error {
	ret := _m.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for RunCBF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRunner_RunCBF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCBF'
type MockRunner_RunCBF_Call struct {
	*mock.Call
}

// RunCBF is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
func (_e *MockRunner_Expecter) RunCBF(ctx interface{}, dir interface{}) *MockRunner_RunCBF_Call {
	return &MockRunner_RunCBF_Call{Call: _e.mock.On("RunCBF", ctx, dir)}
}

func (_c *MockRunner_RunCBF_Call) Run(run func(ctx context.Context, dir string)) *MockRunner_RunCBF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRunner_RunCBF_Call) Return(_a0 error) *MockRunner_RunCBF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRunner_RunCBF_Call) RunAndReturn(run func(context.Context, string) error) *MockRunner_RunCBF_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRunner creates a new instance of MockRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunner {
	mock := &MockRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
