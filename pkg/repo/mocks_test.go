// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repo

import (
	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing/storer"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// References provides a mock function for the type MockRepository
func (_mock *MockRepository) References() (storer.ReferenceIter, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for References")
	}

	var r0 storer.ReferenceIter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (storer.ReferenceIter, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() storer.ReferenceIter); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storer.ReferenceIter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_References_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'References'
type MockRepository_References_Call struct {
	*mock.Call
}

// References is a helper method to define mock.On call
func (_e *MockRepository_Expecter) References() *MockRepository_References_Call {
	return &MockRepository_References_Call{Call: _e.mock.On("References")}
}

func (_c *MockRepository_References_Call) Run(run func()) *MockRepository_References_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_References_Call) Return(referenceIter storer.ReferenceIter, err error) *MockRepository_References_Call {
	_c.Call.Return(referenceIter, err)
	return _c
}

func (_c *MockRepository_References_Call) RunAndReturn(run func() (storer.ReferenceIter, error)) *MockRepository_References_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorktree creates a new instance of MockWorktree. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorktree(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorktree {
	mock := &MockWorktree{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorktree is an autogenerated mock type for the Worktree type
type MockWorktree struct {
	mock.Mock
}

type MockWorktree_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorktree) EXPECT() *MockWorktree_Expecter {
	return &MockWorktree_Expecter{mock: &_m.Mock}
}

// Status provides a mock function for the type MockWorktree
func (_mock *MockWorktree) Status() (git.Status, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 git.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (git.Status, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() git.Status); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(git.Status)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorktree_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockWorktree_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockWorktree_Expecter) Status() *MockWorktree_Status_Call {
	return &MockWorktree_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockWorktree_Status_Call) Run(run func()) *MockWorktree_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorktree_Status_Call) Return(status git.Status, err error) *MockWorktree_Status_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockWorktree_Status_Call) RunAndReturn(run func() (git.Status, error)) *MockWorktree_Status_Call {
	_c.Call.Return(run)
	return _c
}
