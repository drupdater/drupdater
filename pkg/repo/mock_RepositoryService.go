// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repo

import (
	"github.com/drupdater/drupdater/internal"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepositoryService creates a new instance of MockRepositoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryService {
	mock := &MockRepositoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepositoryService is an autogenerated mock type for the RepositoryService type
type MockRepositoryService struct {
	mock.Mock
}

type MockRepositoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryService) EXPECT() *MockRepositoryService_Expecter {
	return &MockRepositoryService_Expecter{mock: &_m.Mock}
}

// BranchExists provides a mock function for the type MockRepositoryService
func (_mock *MockRepositoryService) BranchExists(repository internal.Repository, branch string) (bool, error) {
	ret := _mock.Called(repository, branch)

	if len(ret) == 0 {
		panic("no return value specified for BranchExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(internal.Repository, string) (bool, error)); ok {
		return returnFunc(repository, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(internal.Repository, string) bool); ok {
		r0 = returnFunc(repository, branch)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(internal.Repository, string) error); ok {
		r1 = returnFunc(repository, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryService_BranchExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BranchExists'
type MockRepositoryService_BranchExists_Call struct {
	*mock.Call
}

// BranchExists is a helper method to define mock.On call
//   - repository
//   - branch
func (_e *MockRepositoryService_Expecter) BranchExists(repository interface{}, branch interface{}) *MockRepositoryService_BranchExists_Call {
	return &MockRepositoryService_BranchExists_Call{Call: _e.mock.On("BranchExists", repository, branch)}
}

func (_c *MockRepositoryService_BranchExists_Call) Run(run func(repository internal.Repository, branch string)) *MockRepositoryService_BranchExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.Repository), args[1].(string))
	})
	return _c
}

func (_c *MockRepositoryService_BranchExists_Call) Return(b bool, err error) *MockRepositoryService_BranchExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepositoryService_BranchExists_Call) RunAndReturn(run func(repository internal.Repository, branch string) (bool, error)) *MockRepositoryService_BranchExists_Call {
	_c.Call.Return(run)
	return _c
}

// CloneRepository provides a mock function for the type MockRepositoryService
func (_mock *MockRepositoryService) CloneRepository(repository string, branch string, token string) (internal.Repository, internal.Worktree, string, error) {
	ret := _mock.Called(repository, branch, token)

	if len(ret) == 0 {
		panic("no return value specified for CloneRepository")
	}

	var r0 internal.Repository
	var r1 internal.Worktree
	var r2 string
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (internal.Repository, internal.Worktree, string, error)); ok {
		return returnFunc(repository, branch, token)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) internal.Repository); ok {
		r0 = returnFunc(repository, branch, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internal.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) internal.Worktree); ok {
		r1 = returnFunc(repository, branch, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(internal.Worktree)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, string) string); ok {
		r2 = returnFunc(repository, branch, token)
	} else {
		r2 = ret.Get(2).(string)
	}
	if returnFunc, ok := ret.Get(3).(func(string, string, string) error); ok {
		r3 = returnFunc(repository, branch, token)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockRepositoryService_CloneRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneRepository'
type MockRepositoryService_CloneRepository_Call struct {
	*mock.Call
}

// CloneRepository is a helper method to define mock.On call
//   - repository
//   - branch
//   - token
func (_e *MockRepositoryService_Expecter) CloneRepository(repository interface{}, branch interface{}, token interface{}) *MockRepositoryService_CloneRepository_Call {
	return &MockRepositoryService_CloneRepository_Call{Call: _e.mock.On("CloneRepository", repository, branch, token)}
}

func (_c *MockRepositoryService_CloneRepository_Call) Run(run func(repository string, branch string, token string)) *MockRepositoryService_CloneRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepositoryService_CloneRepository_Call) Return(repository1 internal.Repository, worktree internal.Worktree, s string, err error) *MockRepositoryService_CloneRepository_Call {
	_c.Call.Return(repository1, worktree, s, err)
	return _c
}

func (_c *MockRepositoryService_CloneRepository_Call) RunAndReturn(run func(repository string, branch string, token string) (internal.Repository, internal.Worktree, string, error)) *MockRepositoryService_CloneRepository_Call {
	_c.Call.Return(run)
	return _c
}

// IsSomethingStagedInPath provides a mock function for the type MockRepositoryService
func (_mock *MockRepositoryService) IsSomethingStagedInPath(worktree internal.Worktree, dir string) bool {
	ret := _mock.Called(worktree, dir)

	if len(ret) == 0 {
		panic("no return value specified for IsSomethingStagedInPath")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(internal.Worktree, string) bool); ok {
		r0 = returnFunc(worktree, dir)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRepositoryService_IsSomethingStagedInPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSomethingStagedInPath'
type MockRepositoryService_IsSomethingStagedInPath_Call struct {
	*mock.Call
}

// IsSomethingStagedInPath is a helper method to define mock.On call
//   - worktree
//   - dir
func (_e *MockRepositoryService_Expecter) IsSomethingStagedInPath(worktree interface{}, dir interface{}) *MockRepositoryService_IsSomethingStagedInPath_Call {
	return &MockRepositoryService_IsSomethingStagedInPath_Call{Call: _e.mock.On("IsSomethingStagedInPath", worktree, dir)}
}

func (_c *MockRepositoryService_IsSomethingStagedInPath_Call) Run(run func(worktree internal.Worktree, dir string)) *MockRepositoryService_IsSomethingStagedInPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.Worktree), args[1].(string))
	})
	return _c
}

func (_c *MockRepositoryService_IsSomethingStagedInPath_Call) Return(b bool) *MockRepositoryService_IsSomethingStagedInPath_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRepositoryService_IsSomethingStagedInPath_Call) RunAndReturn(run func(worktree internal.Worktree, dir string) bool) *MockRepositoryService_IsSomethingStagedInPath_Call {
	_c.Call.Return(run)
	return _c
}
