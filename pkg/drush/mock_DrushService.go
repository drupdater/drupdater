// Code generated by mockery v2.53.3. DO NOT EDIT.

package drush

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDrushService is an autogenerated mock type for the DrushService type
type MockDrushService struct {
	mock.Mock
}

type MockDrushService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDrushService) EXPECT() *MockDrushService_Expecter {
	return &MockDrushService_Expecter{mock: &_m.Mock}
}

// ConfigResave provides a mock function with given fields: ctx, dir, site
func (_m *MockDrushService) ConfigResave(ctx context.Context, dir string, site string) error {
	ret := _m.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for ConfigResave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDrushService_ConfigResave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigResave'
type MockDrushService_ConfigResave_Call struct {
	*mock.Call
}

// ConfigResave is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
func (_e *MockDrushService_Expecter) ConfigResave(ctx interface{}, dir interface{}, site interface{}) *MockDrushService_ConfigResave_Call {
	return &MockDrushService_ConfigResave_Call{Call: _e.mock.On("ConfigResave", ctx, dir, site)}
}

func (_c *MockDrushService_ConfigResave_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrushService_ConfigResave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrushService_ConfigResave_Call) Return(_a0 error) *MockDrushService_ConfigResave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDrushService_ConfigResave_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDrushService_ConfigResave_Call {
	_c.Call.Return(run)
	return _c
}

// ExecDrush provides a mock function with given fields: ctx, dir, site, args
func (_m *MockDrushService) ExecDrush(ctx context.Context, dir string, site string, args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dir, site)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecDrush")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) (string, error)); ok {
		return rf(ctx, dir, site, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) string); ok {
		r0 = rf(ctx, dir, site, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...string) error); ok {
		r1 = rf(ctx, dir, site, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDrushService_ExecDrush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecDrush'
type MockDrushService_ExecDrush_Call struct {
	*mock.Call
}

// ExecDrush is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
//   - args ...string
func (_e *MockDrushService_Expecter) ExecDrush(ctx interface{}, dir interface{}, site interface{}, args ...interface{}) *MockDrushService_ExecDrush_Call {
	return &MockDrushService_ExecDrush_Call{Call: _e.mock.On("ExecDrush",
		append([]interface{}{ctx, dir, site}, args...)...)}
}

func (_c *MockDrushService_ExecDrush_Call) Run(run func(ctx context.Context, dir string, site string, args ...string)) *MockDrushService_ExecDrush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDrushService_ExecDrush_Call) Return(_a0 string, _a1 error) *MockDrushService_ExecDrush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDrushService_ExecDrush_Call) RunAndReturn(run func(context.Context, string, string, ...string) (string, error)) *MockDrushService_ExecDrush_Call {
	_c.Call.Return(run)
	return _c
}

// ExportConfiguration provides a mock function with given fields: ctx, dir, site
func (_m *MockDrushService) ExportConfiguration(ctx context.Context, dir string, site string) error {
	ret := _m.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for ExportConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDrushService_ExportConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportConfiguration'
type MockDrushService_ExportConfiguration_Call struct {
	*mock.Call
}

// ExportConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
func (_e *MockDrushService_Expecter) ExportConfiguration(ctx interface{}, dir interface{}, site interface{}) *MockDrushService_ExportConfiguration_Call {
	return &MockDrushService_ExportConfiguration_Call{Call: _e.mock.On("ExportConfiguration", ctx, dir, site)}
}

func (_c *MockDrushService_ExportConfiguration_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrushService_ExportConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrushService_ExportConfiguration_Call) Return(_a0 error) *MockDrushService_ExportConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDrushService_ExportConfiguration_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDrushService_ExportConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigSyncDir provides a mock function with given fields: ctx, dir, site, relative
func (_m *MockDrushService) GetConfigSyncDir(ctx context.Context, dir string, site string, relative bool) (string, error) {
	ret := _m.Called(ctx, dir, site, relative)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigSyncDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) (string, error)); ok {
		return rf(ctx, dir, site, relative)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) string); ok {
		r0 = rf(ctx, dir, site, relative)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, dir, site, relative)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDrushService_GetConfigSyncDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigSyncDir'
type MockDrushService_GetConfigSyncDir_Call struct {
	*mock.Call
}

// GetConfigSyncDir is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
//   - relative bool
func (_e *MockDrushService_Expecter) GetConfigSyncDir(ctx interface{}, dir interface{}, site interface{}, relative interface{}) *MockDrushService_GetConfigSyncDir_Call {
	return &MockDrushService_GetConfigSyncDir_Call{Call: _e.mock.On("GetConfigSyncDir", ctx, dir, site, relative)}
}

func (_c *MockDrushService_GetConfigSyncDir_Call) Run(run func(ctx context.Context, dir string, site string, relative bool)) *MockDrushService_GetConfigSyncDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockDrushService_GetConfigSyncDir_Call) Return(_a0 string, _a1 error) *MockDrushService_GetConfigSyncDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDrushService_GetConfigSyncDir_Call) RunAndReturn(run func(context.Context, string, string, bool) (string, error)) *MockDrushService_GetConfigSyncDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetTranslationPath provides a mock function with given fields: ctx, dir, site, relative
func (_m *MockDrushService) GetTranslationPath(ctx context.Context, dir string, site string, relative bool) (string, error) {
	ret := _m.Called(ctx, dir, site, relative)

	if len(ret) == 0 {
		panic("no return value specified for GetTranslationPath")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) (string, error)); ok {
		return rf(ctx, dir, site, relative)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) string); ok {
		r0 = rf(ctx, dir, site, relative)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, dir, site, relative)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDrushService_GetTranslationPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTranslationPath'
type MockDrushService_GetTranslationPath_Call struct {
	*mock.Call
}

// GetTranslationPath is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
//   - relative bool
func (_e *MockDrushService_Expecter) GetTranslationPath(ctx interface{}, dir interface{}, site interface{}, relative interface{}) *MockDrushService_GetTranslationPath_Call {
	return &MockDrushService_GetTranslationPath_Call{Call: _e.mock.On("GetTranslationPath", ctx, dir, site, relative)}
}

func (_c *MockDrushService_GetTranslationPath_Call) Run(run func(ctx context.Context, dir string, site string, relative bool)) *MockDrushService_GetTranslationPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockDrushService_GetTranslationPath_Call) Return(_a0 string, _a1 error) *MockDrushService_GetTranslationPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDrushService_GetTranslationPath_Call) RunAndReturn(run func(context.Context, string, string, bool) (string, error)) *MockDrushService_GetTranslationPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdateHooks provides a mock function with given fields: ctx, dir, site
func (_m *MockDrushService) GetUpdateHooks(ctx context.Context, dir string, site string) (map[string]UpdateHook, error) {
	ret := _m.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdateHooks")
	}

	var r0 map[string]UpdateHook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]UpdateHook, error)); ok {
		return rf(ctx, dir, site)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]UpdateHook); ok {
		r0 = rf(ctx, dir, site)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]UpdateHook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dir, site)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDrushService_GetUpdateHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdateHooks'
type MockDrushService_GetUpdateHooks_Call struct {
	*mock.Call
}

// GetUpdateHooks is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
func (_e *MockDrushService_Expecter) GetUpdateHooks(ctx interface{}, dir interface{}, site interface{}) *MockDrushService_GetUpdateHooks_Call {
	return &MockDrushService_GetUpdateHooks_Call{Call: _e.mock.On("GetUpdateHooks", ctx, dir, site)}
}

func (_c *MockDrushService_GetUpdateHooks_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrushService_GetUpdateHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrushService_GetUpdateHooks_Call) Return(_a0 map[string]UpdateHook, _a1 error) *MockDrushService_GetUpdateHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDrushService_GetUpdateHooks_Call) RunAndReturn(run func(context.Context, string, string) (map[string]UpdateHook, error)) *MockDrushService_GetUpdateHooks_Call {
	_c.Call.Return(run)
	return _c
}

// InstallSite provides a mock function with given fields: ctx, dir, site
func (_m *MockDrushService) InstallSite(ctx context.Context, dir string, site string) error {
	ret := _m.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for InstallSite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDrushService_InstallSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallSite'
type MockDrushService_InstallSite_Call struct {
	*mock.Call
}

// InstallSite is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
func (_e *MockDrushService_Expecter) InstallSite(ctx interface{}, dir interface{}, site interface{}) *MockDrushService_InstallSite_Call {
	return &MockDrushService_InstallSite_Call{Call: _e.mock.On("InstallSite", ctx, dir, site)}
}

func (_c *MockDrushService_InstallSite_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrushService_InstallSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrushService_InstallSite_Call) Return(_a0 error) *MockDrushService_InstallSite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDrushService_InstallSite_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDrushService_InstallSite_Call {
	_c.Call.Return(run)
	return _c
}

// IsModuleEnabled provides a mock function with given fields: ctx, dir, site, module
func (_m *MockDrushService) IsModuleEnabled(ctx context.Context, dir string, site string, module string) (bool, error) {
	ret := _m.Called(ctx, dir, site, module)

	if len(ret) == 0 {
		panic("no return value specified for IsModuleEnabled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, dir, site, module)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, dir, site, module)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, dir, site, module)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDrushService_IsModuleEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsModuleEnabled'
type MockDrushService_IsModuleEnabled_Call struct {
	*mock.Call
}

// IsModuleEnabled is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
//   - module string
func (_e *MockDrushService_Expecter) IsModuleEnabled(ctx interface{}, dir interface{}, site interface{}, module interface{}) *MockDrushService_IsModuleEnabled_Call {
	return &MockDrushService_IsModuleEnabled_Call{Call: _e.mock.On("IsModuleEnabled", ctx, dir, site, module)}
}

func (_c *MockDrushService_IsModuleEnabled_Call) Run(run func(ctx context.Context, dir string, site string, module string)) *MockDrushService_IsModuleEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDrushService_IsModuleEnabled_Call) Return(_a0 bool, _a1 error) *MockDrushService_IsModuleEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDrushService_IsModuleEnabled_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *MockDrushService_IsModuleEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// LocalizeTranslations provides a mock function with given fields: ctx, dir, site
func (_m *MockDrushService) LocalizeTranslations(ctx context.Context, dir string, site string) error {
	ret := _m.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for LocalizeTranslations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDrushService_LocalizeTranslations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalizeTranslations'
type MockDrushService_LocalizeTranslations_Call struct {
	*mock.Call
}

// LocalizeTranslations is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
func (_e *MockDrushService_Expecter) LocalizeTranslations(ctx interface{}, dir interface{}, site interface{}) *MockDrushService_LocalizeTranslations_Call {
	return &MockDrushService_LocalizeTranslations_Call{Call: _e.mock.On("LocalizeTranslations", ctx, dir, site)}
}

func (_c *MockDrushService_LocalizeTranslations_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrushService_LocalizeTranslations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrushService_LocalizeTranslations_Call) Return(_a0 error) *MockDrushService_LocalizeTranslations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDrushService_LocalizeTranslations_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDrushService_LocalizeTranslations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSite provides a mock function with given fields: ctx, dir, site
func (_m *MockDrushService) UpdateSite(ctx context.Context, dir string, site string) error {
	ret := _m.Called(ctx, dir, site)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dir, site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDrushService_UpdateSite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSite'
type MockDrushService_UpdateSite_Call struct {
	*mock.Call
}

// UpdateSite is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - site string
func (_e *MockDrushService_Expecter) UpdateSite(ctx interface{}, dir interface{}, site interface{}) *MockDrushService_UpdateSite_Call {
	return &MockDrushService_UpdateSite_Call{Call: _e.mock.On("UpdateSite", ctx, dir, site)}
}

func (_c *MockDrushService_UpdateSite_Call) Run(run func(ctx context.Context, dir string, site string)) *MockDrushService_UpdateSite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDrushService_UpdateSite_Call) Return(_a0 error) *MockDrushService_UpdateSite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDrushService_UpdateSite_Call) RunAndReturn(run func(context.Context, string, string) error) *MockDrushService_UpdateSite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDrushService creates a new instance of MockDrushService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDrushService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDrushService {
	mock := &MockDrushService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
